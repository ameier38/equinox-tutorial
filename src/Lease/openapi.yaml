openapi: 3.0.0
info:
  title: Ouroboros API
  description: Ouroboros integration test API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.1
servers:
- url: https://virtserver.swaggerhub.com/ameier38/Ouroboros/1.0.0
  description: SwaggerHub API Auto Mocking
paths:
  /lease:
    get:
      summary: list leases
      description: list leases
      responses:
        200:
          description: lease list response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Lease'
    post:
      summary: create lease
      description: create lease
      requestBody:
        description: new lease
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewLease'
      responses:
        200:
          description: lease state response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaseState'
  /lease/{leaseId}:
    get:
      summary: get lease
      description: get lease
      parameters:
      - name: leaseId
        in: path
        description: lease unique id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
      - name: asOf
        in: query
        description: As of date
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: asAt
        in: query
        description: As at date
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      responses:
        200:
          description: lease state response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaseState'
    put:
      summary: update lease
      description: update lease
      parameters:
      - name: leaseId
        in: path
        description: lease unique id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
      - name: effDate
        in: query
        description: update effective date
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      requestBody:
        description: new lease
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewLease'
      responses:
        200:
          description: lease state response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaseState'
    delete:
      summary: terminate lease
      description: terminate lease
      parameters:
      - name: leaseId
        in: path
        description: lease unique id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
      - name: effDate
        in: query
        description: update effective date
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      responses:
        200:
          description: lease state response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaseState'
  /lease/{leaseId}/schedule:
    post:
      summary: schedule payment
      description: schedule payment
      parameters:
      - name: leaseId
        in: path
        description: lease unique id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
      requestBody:
        description: payment request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Payment'
      responses:
        200:
          description: lease state response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaseState'
  /lease/{leaseId}/payment:
    post:
      summary: make payment
      description: make payment
      parameters:
      - name: leaseId
        in: path
        description: lease unique id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
      requestBody:
        description: payment request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Payment'
      responses:
        200:
          description: lease state response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaseState'
  /lease/{leaseId}/{eventId}:
    delete:
      summary: undo event
      description: undo event
      parameters:
      - name: leaseId
        in: path
        description: lease unique id
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
      - name: eventId
        in: path
        description: lease event id
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
          example: 1
      responses:
        200:
          description: lease state response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaseState'
components:
  schemas:
    Payment:
      required:
      - paymentAmount
      - paymentDate
      type: object
      properties:
        paymentDate:
          type: string
          format: date-time
        paymentAmount:
          type: number
          example: 25
    NewLease:
      required:
      - maturityDate
      - monthlyPaymentAmount
      - startDate
      type: object
      properties:
        startDate:
          type: string
          format: date-time
        maturityDate:
          type: string
          format: date-time
        monthlyPaymentAmount:
          type: number
          example: 25
    Lease:
      required:
      - leaseId
      - maturityDate
      - monthlyPaymentAmount
      - startDate
      type: object
      properties:
        leaseId:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        startDate:
          type: string
          format: date-time
        maturityDate:
          type: string
          format: date-time
        monthlyPaymentAmount:
          type: number
          example: 25
    Event:
      required:
      - createdDate
      - effectiveDate
      - eventId
      - eventType
      type: object
      properties:
        eventId:
          type: integer
          format: int32
          example: 1
        eventType:
          type: string
          example: Created
        createdDate:
          type: string
          format: date-time
        effectiveDate:
          type: string
          format: date-time
    LeaseState:
      required:
      - amountDue
      - events
      - lease
      - status
      - totalPaid
      - totalScheduled
      type: object
      properties:
        lease:
          $ref: '#/components/schemas/Lease'
        status:
          type: string
          example: Current
        totalScheduled:
          type: number
          example: 25
        totalPaid:
          type: number
          example: 25
        amountDue:
          type: number
          example: 25
        events:
          type: array
          items:
            $ref: '#/components/schemas/Event'
