// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: cosmicdealership/vehicle/v1/vehicle_command_service.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace CosmicDealership.Vehicle.V1 {
  /// <summary>
  /// Service to handle interactions with Vehicles.
  /// </summary>
  public static partial class VehicleCommandService
  {
    static readonly string __ServiceName = "cosmicdealership.vehicle.v1.VehicleCommandService";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::CosmicDealership.Vehicle.V1.AddVehicleRequest> __Marshaller_cosmicdealership_vehicle_v1_AddVehicleRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CosmicDealership.Vehicle.V1.AddVehicleRequest.Parser));
    static readonly grpc::Marshaller<global::CosmicDealership.Vehicle.V1.AddVehicleResponse> __Marshaller_cosmicdealership_vehicle_v1_AddVehicleResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CosmicDealership.Vehicle.V1.AddVehicleResponse.Parser));
    static readonly grpc::Marshaller<global::CosmicDealership.Vehicle.V1.UpdateVehicleRequest> __Marshaller_cosmicdealership_vehicle_v1_UpdateVehicleRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CosmicDealership.Vehicle.V1.UpdateVehicleRequest.Parser));
    static readonly grpc::Marshaller<global::CosmicDealership.Vehicle.V1.UpdateVehicleResponse> __Marshaller_cosmicdealership_vehicle_v1_UpdateVehicleResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CosmicDealership.Vehicle.V1.UpdateVehicleResponse.Parser));
    static readonly grpc::Marshaller<global::CosmicDealership.Vehicle.V1.UpdateAvatarRequest> __Marshaller_cosmicdealership_vehicle_v1_UpdateAvatarRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CosmicDealership.Vehicle.V1.UpdateAvatarRequest.Parser));
    static readonly grpc::Marshaller<global::CosmicDealership.Vehicle.V1.UpdateAvatarResponse> __Marshaller_cosmicdealership_vehicle_v1_UpdateAvatarResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CosmicDealership.Vehicle.V1.UpdateAvatarResponse.Parser));
    static readonly grpc::Marshaller<global::CosmicDealership.Vehicle.V1.RemoveAvatarRequest> __Marshaller_cosmicdealership_vehicle_v1_RemoveAvatarRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CosmicDealership.Vehicle.V1.RemoveAvatarRequest.Parser));
    static readonly grpc::Marshaller<global::CosmicDealership.Vehicle.V1.RemoveAvatarResponse> __Marshaller_cosmicdealership_vehicle_v1_RemoveAvatarResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CosmicDealership.Vehicle.V1.RemoveAvatarResponse.Parser));
    static readonly grpc::Marshaller<global::CosmicDealership.Vehicle.V1.AddImageRequest> __Marshaller_cosmicdealership_vehicle_v1_AddImageRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CosmicDealership.Vehicle.V1.AddImageRequest.Parser));
    static readonly grpc::Marshaller<global::CosmicDealership.Vehicle.V1.AddImageResponse> __Marshaller_cosmicdealership_vehicle_v1_AddImageResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CosmicDealership.Vehicle.V1.AddImageResponse.Parser));
    static readonly grpc::Marshaller<global::CosmicDealership.Vehicle.V1.RemoveImageRequest> __Marshaller_cosmicdealership_vehicle_v1_RemoveImageRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CosmicDealership.Vehicle.V1.RemoveImageRequest.Parser));
    static readonly grpc::Marshaller<global::CosmicDealership.Vehicle.V1.RemoveImageResponse> __Marshaller_cosmicdealership_vehicle_v1_RemoveImageResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CosmicDealership.Vehicle.V1.RemoveImageResponse.Parser));
    static readonly grpc::Marshaller<global::CosmicDealership.Vehicle.V1.RemoveVehicleRequest> __Marshaller_cosmicdealership_vehicle_v1_RemoveVehicleRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CosmicDealership.Vehicle.V1.RemoveVehicleRequest.Parser));
    static readonly grpc::Marshaller<global::CosmicDealership.Vehicle.V1.RemoveVehicleResponse> __Marshaller_cosmicdealership_vehicle_v1_RemoveVehicleResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CosmicDealership.Vehicle.V1.RemoveVehicleResponse.Parser));
    static readonly grpc::Marshaller<global::CosmicDealership.Vehicle.V1.LeaseVehicleRequest> __Marshaller_cosmicdealership_vehicle_v1_LeaseVehicleRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CosmicDealership.Vehicle.V1.LeaseVehicleRequest.Parser));
    static readonly grpc::Marshaller<global::CosmicDealership.Vehicle.V1.LeaseVehicleResponse> __Marshaller_cosmicdealership_vehicle_v1_LeaseVehicleResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CosmicDealership.Vehicle.V1.LeaseVehicleResponse.Parser));
    static readonly grpc::Marshaller<global::CosmicDealership.Vehicle.V1.ReturnVehicleRequest> __Marshaller_cosmicdealership_vehicle_v1_ReturnVehicleRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CosmicDealership.Vehicle.V1.ReturnVehicleRequest.Parser));
    static readonly grpc::Marshaller<global::CosmicDealership.Vehicle.V1.ReturnVehicleResponse> __Marshaller_cosmicdealership_vehicle_v1_ReturnVehicleResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CosmicDealership.Vehicle.V1.ReturnVehicleResponse.Parser));

    static readonly grpc::Method<global::CosmicDealership.Vehicle.V1.AddVehicleRequest, global::CosmicDealership.Vehicle.V1.AddVehicleResponse> __Method_AddVehicle = new grpc::Method<global::CosmicDealership.Vehicle.V1.AddVehicleRequest, global::CosmicDealership.Vehicle.V1.AddVehicleResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddVehicle",
        __Marshaller_cosmicdealership_vehicle_v1_AddVehicleRequest,
        __Marshaller_cosmicdealership_vehicle_v1_AddVehicleResponse);

    static readonly grpc::Method<global::CosmicDealership.Vehicle.V1.UpdateVehicleRequest, global::CosmicDealership.Vehicle.V1.UpdateVehicleResponse> __Method_UpdateVehicle = new grpc::Method<global::CosmicDealership.Vehicle.V1.UpdateVehicleRequest, global::CosmicDealership.Vehicle.V1.UpdateVehicleResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateVehicle",
        __Marshaller_cosmicdealership_vehicle_v1_UpdateVehicleRequest,
        __Marshaller_cosmicdealership_vehicle_v1_UpdateVehicleResponse);

    static readonly grpc::Method<global::CosmicDealership.Vehicle.V1.UpdateAvatarRequest, global::CosmicDealership.Vehicle.V1.UpdateAvatarResponse> __Method_UpdateAvatar = new grpc::Method<global::CosmicDealership.Vehicle.V1.UpdateAvatarRequest, global::CosmicDealership.Vehicle.V1.UpdateAvatarResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateAvatar",
        __Marshaller_cosmicdealership_vehicle_v1_UpdateAvatarRequest,
        __Marshaller_cosmicdealership_vehicle_v1_UpdateAvatarResponse);

    static readonly grpc::Method<global::CosmicDealership.Vehicle.V1.RemoveAvatarRequest, global::CosmicDealership.Vehicle.V1.RemoveAvatarResponse> __Method_RemoveAvatar = new grpc::Method<global::CosmicDealership.Vehicle.V1.RemoveAvatarRequest, global::CosmicDealership.Vehicle.V1.RemoveAvatarResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RemoveAvatar",
        __Marshaller_cosmicdealership_vehicle_v1_RemoveAvatarRequest,
        __Marshaller_cosmicdealership_vehicle_v1_RemoveAvatarResponse);

    static readonly grpc::Method<global::CosmicDealership.Vehicle.V1.AddImageRequest, global::CosmicDealership.Vehicle.V1.AddImageResponse> __Method_AddImage = new grpc::Method<global::CosmicDealership.Vehicle.V1.AddImageRequest, global::CosmicDealership.Vehicle.V1.AddImageResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddImage",
        __Marshaller_cosmicdealership_vehicle_v1_AddImageRequest,
        __Marshaller_cosmicdealership_vehicle_v1_AddImageResponse);

    static readonly grpc::Method<global::CosmicDealership.Vehicle.V1.RemoveImageRequest, global::CosmicDealership.Vehicle.V1.RemoveImageResponse> __Method_RemoveImage = new grpc::Method<global::CosmicDealership.Vehicle.V1.RemoveImageRequest, global::CosmicDealership.Vehicle.V1.RemoveImageResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RemoveImage",
        __Marshaller_cosmicdealership_vehicle_v1_RemoveImageRequest,
        __Marshaller_cosmicdealership_vehicle_v1_RemoveImageResponse);

    static readonly grpc::Method<global::CosmicDealership.Vehicle.V1.RemoveVehicleRequest, global::CosmicDealership.Vehicle.V1.RemoveVehicleResponse> __Method_RemoveVehicle = new grpc::Method<global::CosmicDealership.Vehicle.V1.RemoveVehicleRequest, global::CosmicDealership.Vehicle.V1.RemoveVehicleResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RemoveVehicle",
        __Marshaller_cosmicdealership_vehicle_v1_RemoveVehicleRequest,
        __Marshaller_cosmicdealership_vehicle_v1_RemoveVehicleResponse);

    static readonly grpc::Method<global::CosmicDealership.Vehicle.V1.LeaseVehicleRequest, global::CosmicDealership.Vehicle.V1.LeaseVehicleResponse> __Method_LeaseVehicle = new grpc::Method<global::CosmicDealership.Vehicle.V1.LeaseVehicleRequest, global::CosmicDealership.Vehicle.V1.LeaseVehicleResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "LeaseVehicle",
        __Marshaller_cosmicdealership_vehicle_v1_LeaseVehicleRequest,
        __Marshaller_cosmicdealership_vehicle_v1_LeaseVehicleResponse);

    static readonly grpc::Method<global::CosmicDealership.Vehicle.V1.ReturnVehicleRequest, global::CosmicDealership.Vehicle.V1.ReturnVehicleResponse> __Method_ReturnVehicle = new grpc::Method<global::CosmicDealership.Vehicle.V1.ReturnVehicleRequest, global::CosmicDealership.Vehicle.V1.ReturnVehicleResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ReturnVehicle",
        __Marshaller_cosmicdealership_vehicle_v1_ReturnVehicleRequest,
        __Marshaller_cosmicdealership_vehicle_v1_ReturnVehicleResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::CosmicDealership.Vehicle.V1.VehicleCommandServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of VehicleCommandService</summary>
    [grpc::BindServiceMethod(typeof(VehicleCommandService), "BindService")]
    public abstract partial class VehicleCommandServiceBase
    {
      /// <summary>
      /// Add a vehicle to inventory.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CosmicDealership.Vehicle.V1.AddVehicleResponse> AddVehicle(global::CosmicDealership.Vehicle.V1.AddVehicleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Update an existing vehicle.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CosmicDealership.Vehicle.V1.UpdateVehicleResponse> UpdateVehicle(global::CosmicDealership.Vehicle.V1.UpdateVehicleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Update the vehicle avatar.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CosmicDealership.Vehicle.V1.UpdateAvatarResponse> UpdateAvatar(global::CosmicDealership.Vehicle.V1.UpdateAvatarRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Remove the vehicle avatar.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CosmicDealership.Vehicle.V1.RemoveAvatarResponse> RemoveAvatar(global::CosmicDealership.Vehicle.V1.RemoveAvatarRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add a vehicle image.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CosmicDealership.Vehicle.V1.AddImageResponse> AddImage(global::CosmicDealership.Vehicle.V1.AddImageRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Remove a vehicle image.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CosmicDealership.Vehicle.V1.RemoveImageResponse> RemoveImage(global::CosmicDealership.Vehicle.V1.RemoveImageRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Remove a vehicle from inventory.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CosmicDealership.Vehicle.V1.RemoveVehicleResponse> RemoveVehicle(global::CosmicDealership.Vehicle.V1.RemoveVehicleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lease a vehicle.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CosmicDealership.Vehicle.V1.LeaseVehicleResponse> LeaseVehicle(global::CosmicDealership.Vehicle.V1.LeaseVehicleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Return a vehicle after a lease.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::CosmicDealership.Vehicle.V1.ReturnVehicleResponse> ReturnVehicle(global::CosmicDealership.Vehicle.V1.ReturnVehicleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for VehicleCommandService</summary>
    public partial class VehicleCommandServiceClient : grpc::ClientBase<VehicleCommandServiceClient>
    {
      /// <summary>Creates a new client for VehicleCommandService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public VehicleCommandServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for VehicleCommandService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public VehicleCommandServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected VehicleCommandServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected VehicleCommandServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Add a vehicle to inventory.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CosmicDealership.Vehicle.V1.AddVehicleResponse AddVehicle(global::CosmicDealership.Vehicle.V1.AddVehicleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddVehicle(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a vehicle to inventory.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CosmicDealership.Vehicle.V1.AddVehicleResponse AddVehicle(global::CosmicDealership.Vehicle.V1.AddVehicleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddVehicle, null, options, request);
      }
      /// <summary>
      /// Add a vehicle to inventory.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CosmicDealership.Vehicle.V1.AddVehicleResponse> AddVehicleAsync(global::CosmicDealership.Vehicle.V1.AddVehicleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddVehicleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a vehicle to inventory.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CosmicDealership.Vehicle.V1.AddVehicleResponse> AddVehicleAsync(global::CosmicDealership.Vehicle.V1.AddVehicleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddVehicle, null, options, request);
      }
      /// <summary>
      /// Update an existing vehicle.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CosmicDealership.Vehicle.V1.UpdateVehicleResponse UpdateVehicle(global::CosmicDealership.Vehicle.V1.UpdateVehicleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateVehicle(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update an existing vehicle.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CosmicDealership.Vehicle.V1.UpdateVehicleResponse UpdateVehicle(global::CosmicDealership.Vehicle.V1.UpdateVehicleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateVehicle, null, options, request);
      }
      /// <summary>
      /// Update an existing vehicle.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CosmicDealership.Vehicle.V1.UpdateVehicleResponse> UpdateVehicleAsync(global::CosmicDealership.Vehicle.V1.UpdateVehicleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateVehicleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update an existing vehicle.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CosmicDealership.Vehicle.V1.UpdateVehicleResponse> UpdateVehicleAsync(global::CosmicDealership.Vehicle.V1.UpdateVehicleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateVehicle, null, options, request);
      }
      /// <summary>
      /// Update the vehicle avatar.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CosmicDealership.Vehicle.V1.UpdateAvatarResponse UpdateAvatar(global::CosmicDealership.Vehicle.V1.UpdateAvatarRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAvatar(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update the vehicle avatar.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CosmicDealership.Vehicle.V1.UpdateAvatarResponse UpdateAvatar(global::CosmicDealership.Vehicle.V1.UpdateAvatarRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateAvatar, null, options, request);
      }
      /// <summary>
      /// Update the vehicle avatar.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CosmicDealership.Vehicle.V1.UpdateAvatarResponse> UpdateAvatarAsync(global::CosmicDealership.Vehicle.V1.UpdateAvatarRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAvatarAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update the vehicle avatar.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CosmicDealership.Vehicle.V1.UpdateAvatarResponse> UpdateAvatarAsync(global::CosmicDealership.Vehicle.V1.UpdateAvatarRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateAvatar, null, options, request);
      }
      /// <summary>
      /// Remove the vehicle avatar.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CosmicDealership.Vehicle.V1.RemoveAvatarResponse RemoveAvatar(global::CosmicDealership.Vehicle.V1.RemoveAvatarRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveAvatar(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Remove the vehicle avatar.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CosmicDealership.Vehicle.V1.RemoveAvatarResponse RemoveAvatar(global::CosmicDealership.Vehicle.V1.RemoveAvatarRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RemoveAvatar, null, options, request);
      }
      /// <summary>
      /// Remove the vehicle avatar.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CosmicDealership.Vehicle.V1.RemoveAvatarResponse> RemoveAvatarAsync(global::CosmicDealership.Vehicle.V1.RemoveAvatarRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveAvatarAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Remove the vehicle avatar.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CosmicDealership.Vehicle.V1.RemoveAvatarResponse> RemoveAvatarAsync(global::CosmicDealership.Vehicle.V1.RemoveAvatarRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RemoveAvatar, null, options, request);
      }
      /// <summary>
      /// Add a vehicle image.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CosmicDealership.Vehicle.V1.AddImageResponse AddImage(global::CosmicDealership.Vehicle.V1.AddImageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddImage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a vehicle image.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CosmicDealership.Vehicle.V1.AddImageResponse AddImage(global::CosmicDealership.Vehicle.V1.AddImageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddImage, null, options, request);
      }
      /// <summary>
      /// Add a vehicle image.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CosmicDealership.Vehicle.V1.AddImageResponse> AddImageAsync(global::CosmicDealership.Vehicle.V1.AddImageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddImageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a vehicle image.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CosmicDealership.Vehicle.V1.AddImageResponse> AddImageAsync(global::CosmicDealership.Vehicle.V1.AddImageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddImage, null, options, request);
      }
      /// <summary>
      /// Remove a vehicle image.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CosmicDealership.Vehicle.V1.RemoveImageResponse RemoveImage(global::CosmicDealership.Vehicle.V1.RemoveImageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveImage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Remove a vehicle image.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CosmicDealership.Vehicle.V1.RemoveImageResponse RemoveImage(global::CosmicDealership.Vehicle.V1.RemoveImageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RemoveImage, null, options, request);
      }
      /// <summary>
      /// Remove a vehicle image.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CosmicDealership.Vehicle.V1.RemoveImageResponse> RemoveImageAsync(global::CosmicDealership.Vehicle.V1.RemoveImageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveImageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Remove a vehicle image.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CosmicDealership.Vehicle.V1.RemoveImageResponse> RemoveImageAsync(global::CosmicDealership.Vehicle.V1.RemoveImageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RemoveImage, null, options, request);
      }
      /// <summary>
      /// Remove a vehicle from inventory.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CosmicDealership.Vehicle.V1.RemoveVehicleResponse RemoveVehicle(global::CosmicDealership.Vehicle.V1.RemoveVehicleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveVehicle(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Remove a vehicle from inventory.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CosmicDealership.Vehicle.V1.RemoveVehicleResponse RemoveVehicle(global::CosmicDealership.Vehicle.V1.RemoveVehicleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RemoveVehicle, null, options, request);
      }
      /// <summary>
      /// Remove a vehicle from inventory.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CosmicDealership.Vehicle.V1.RemoveVehicleResponse> RemoveVehicleAsync(global::CosmicDealership.Vehicle.V1.RemoveVehicleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveVehicleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Remove a vehicle from inventory.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CosmicDealership.Vehicle.V1.RemoveVehicleResponse> RemoveVehicleAsync(global::CosmicDealership.Vehicle.V1.RemoveVehicleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RemoveVehicle, null, options, request);
      }
      /// <summary>
      /// Lease a vehicle.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CosmicDealership.Vehicle.V1.LeaseVehicleResponse LeaseVehicle(global::CosmicDealership.Vehicle.V1.LeaseVehicleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LeaseVehicle(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lease a vehicle.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CosmicDealership.Vehicle.V1.LeaseVehicleResponse LeaseVehicle(global::CosmicDealership.Vehicle.V1.LeaseVehicleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_LeaseVehicle, null, options, request);
      }
      /// <summary>
      /// Lease a vehicle.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CosmicDealership.Vehicle.V1.LeaseVehicleResponse> LeaseVehicleAsync(global::CosmicDealership.Vehicle.V1.LeaseVehicleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LeaseVehicleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lease a vehicle.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CosmicDealership.Vehicle.V1.LeaseVehicleResponse> LeaseVehicleAsync(global::CosmicDealership.Vehicle.V1.LeaseVehicleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_LeaseVehicle, null, options, request);
      }
      /// <summary>
      /// Return a vehicle after a lease.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CosmicDealership.Vehicle.V1.ReturnVehicleResponse ReturnVehicle(global::CosmicDealership.Vehicle.V1.ReturnVehicleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReturnVehicle(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Return a vehicle after a lease.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CosmicDealership.Vehicle.V1.ReturnVehicleResponse ReturnVehicle(global::CosmicDealership.Vehicle.V1.ReturnVehicleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ReturnVehicle, null, options, request);
      }
      /// <summary>
      /// Return a vehicle after a lease.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CosmicDealership.Vehicle.V1.ReturnVehicleResponse> ReturnVehicleAsync(global::CosmicDealership.Vehicle.V1.ReturnVehicleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReturnVehicleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Return a vehicle after a lease.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CosmicDealership.Vehicle.V1.ReturnVehicleResponse> ReturnVehicleAsync(global::CosmicDealership.Vehicle.V1.ReturnVehicleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ReturnVehicle, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override VehicleCommandServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new VehicleCommandServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(VehicleCommandServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AddVehicle, serviceImpl.AddVehicle)
          .AddMethod(__Method_UpdateVehicle, serviceImpl.UpdateVehicle)
          .AddMethod(__Method_UpdateAvatar, serviceImpl.UpdateAvatar)
          .AddMethod(__Method_RemoveAvatar, serviceImpl.RemoveAvatar)
          .AddMethod(__Method_AddImage, serviceImpl.AddImage)
          .AddMethod(__Method_RemoveImage, serviceImpl.RemoveImage)
          .AddMethod(__Method_RemoveVehicle, serviceImpl.RemoveVehicle)
          .AddMethod(__Method_LeaseVehicle, serviceImpl.LeaseVehicle)
          .AddMethod(__Method_ReturnVehicle, serviceImpl.ReturnVehicle).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, VehicleCommandServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_AddVehicle, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CosmicDealership.Vehicle.V1.AddVehicleRequest, global::CosmicDealership.Vehicle.V1.AddVehicleResponse>(serviceImpl.AddVehicle));
      serviceBinder.AddMethod(__Method_UpdateVehicle, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CosmicDealership.Vehicle.V1.UpdateVehicleRequest, global::CosmicDealership.Vehicle.V1.UpdateVehicleResponse>(serviceImpl.UpdateVehicle));
      serviceBinder.AddMethod(__Method_UpdateAvatar, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CosmicDealership.Vehicle.V1.UpdateAvatarRequest, global::CosmicDealership.Vehicle.V1.UpdateAvatarResponse>(serviceImpl.UpdateAvatar));
      serviceBinder.AddMethod(__Method_RemoveAvatar, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CosmicDealership.Vehicle.V1.RemoveAvatarRequest, global::CosmicDealership.Vehicle.V1.RemoveAvatarResponse>(serviceImpl.RemoveAvatar));
      serviceBinder.AddMethod(__Method_AddImage, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CosmicDealership.Vehicle.V1.AddImageRequest, global::CosmicDealership.Vehicle.V1.AddImageResponse>(serviceImpl.AddImage));
      serviceBinder.AddMethod(__Method_RemoveImage, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CosmicDealership.Vehicle.V1.RemoveImageRequest, global::CosmicDealership.Vehicle.V1.RemoveImageResponse>(serviceImpl.RemoveImage));
      serviceBinder.AddMethod(__Method_RemoveVehicle, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CosmicDealership.Vehicle.V1.RemoveVehicleRequest, global::CosmicDealership.Vehicle.V1.RemoveVehicleResponse>(serviceImpl.RemoveVehicle));
      serviceBinder.AddMethod(__Method_LeaseVehicle, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CosmicDealership.Vehicle.V1.LeaseVehicleRequest, global::CosmicDealership.Vehicle.V1.LeaseVehicleResponse>(serviceImpl.LeaseVehicle));
      serviceBinder.AddMethod(__Method_ReturnVehicle, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::CosmicDealership.Vehicle.V1.ReturnVehicleRequest, global::CosmicDealership.Vehicle.V1.ReturnVehicleResponse>(serviceImpl.ReturnVehicle));
    }

  }
}
#endregion
