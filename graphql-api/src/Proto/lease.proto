syntax = "proto3";
package lease;

option csharp_namespace = "Proto.Lease";

import "google/protobuf/timestamp.proto";

service LeaseService {
    rpc Execute(Command) returns (ExecuteResponse) {}
    rpc QueryState(Query) returns (QueryStateResponse) {}
    rpc QueryEvents(Query) returns (QueryEventsResponse) {}
}

enum LeaseStatus {
    outstanding = 0;
    terminated = 1;
}

message AsOfDate {
    google.protobuf.Timestamp as_at = 1;
    google.protobuf.Timestamp as_on = 2;
}

message Query {
    string lease_id = 1;
    AsOfDate as_of_date = 2;
}

message NewLease {
    string user_id = 1;
    google.protobuf.Timestamp maturity_date = 3;
    float monthly_payment_amount = 4;
}

message LeaseEvent {
    int32 event_id = 1;
    google.protobuf.Timestamp event_created_date = 2;
    google.protobuf.Timestamp event_effectiveDate = 3;
    string event_type = 4;
}

message LeaseCommand {
    google.protobuf.Timestamp effective_date = 1;
    oneof command {
        NewLease create_lease = 2;
        float schedule_payment = 3;
        float receive_payment = 4;
        bool terminate_lease = 5;
    }
}

message Command {
    string lease_id = 1;
    oneof command {
        int32 delete_event = 2;
        LeaseCommand lease_command = 3;
    }
}

message ExecuteResponse {
    oneof response {
        string ok = 1;
        string error = 2;
    }
}

message LeaseObservation {
    google.protobuf.Timestamp observation_date = 1;
    string lease_id = 2;
    string user_id = 3;
    google.protobuf.Timestamp start_date = 4;
    google.protobuf.Timestamp maturity_date = 5;
    float monthly_payment_amount = 6;
    float total_scheduled = 7;
    float total_paid = 8;
    float amount_due = 9;
    LeaseStatus lease_status = 10;
}

message QueryStateResponse {
    message LeaseState {
        oneof state {
            LeaseObservation observation = 1;
        }
    }
    oneof response {
        LeaseState ok = 1;
        string error = 2;
    }
}

message QueryEventsResponse {
    message LeaseEvents {
        repeated LeaseEvent events = 1;
    }

    oneof response {
        LeaseEvents ok = 1;
        string error = 2;
    }
}
