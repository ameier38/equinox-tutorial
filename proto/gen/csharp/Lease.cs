// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: tutorial/lease/v1/lease.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Tutorial.Lease.V1 {

  /// <summary>Holder for reflection information generated from tutorial/lease/v1/lease.proto</summary>
  public static partial class LeaseReflection {

    #region Descriptor
    /// <summary>File descriptor for tutorial/lease/v1/lease.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LeaseReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch10dXRvcmlhbC9sZWFzZS92MS9sZWFzZS5wcm90bxIRdHV0b3JpYWwubGVh",
            "c2UudjEaH2dvb2dsZS9wcm90b2J1Zi90aW1lc3RhbXAucHJvdG8aFmdvb2ds",
            "ZS90eXBlL2RhdGUucHJvdG8aF2dvb2dsZS90eXBlL21vbmV5LnByb3RvImEK",
            "CEFzT2ZEYXRlEi4KCmFzX2F0X3RpbWUYASABKAsyGi5nb29nbGUucHJvdG9i",
            "dWYuVGltZXN0YW1wEiUKCmFzX29uX2RhdGUYAiABKAsyES5nb29nbGUudHlw",
            "ZS5EYXRlIq8BCgVMZWFzZRIQCghsZWFzZV9pZBgBIAEoCRIPCgd1c2VyX2lk",
            "GAIgASgJEiUKCnN0YXJ0X2RhdGUYAyABKAsyES5nb29nbGUudHlwZS5EYXRl",
            "EigKDW1hdHVyaXR5X2RhdGUYBCABKAsyES5nb29nbGUudHlwZS5EYXRlEjIK",
            "Fm1vbnRobHlfcGF5bWVudF9hbW91bnQYBSABKAsyEi5nb29nbGUudHlwZS5N",
            "b25leSJ5CghOZXdMZWFzZRIPCgd1c2VyX2lkGAEgASgJEigKDW1hdHVyaXR5",
            "X2RhdGUYAyABKAsyES5nb29nbGUudHlwZS5EYXRlEjIKFm1vbnRobHlfcGF5",
            "bWVudF9hbW91bnQYBCABKAsyEi5nb29nbGUudHlwZS5Nb25leSJJCgdQYXlt",
            "ZW50EhIKCnBheW1lbnRfaWQYASABKAkSKgoOcGF5bWVudF9hbW91bnQYAiAB",
            "KAsyEi5nb29nbGUudHlwZS5Nb25leSKbAQoKTGVhc2VFdmVudBIQCghldmVu",
            "dF9pZBgBIAEoBRI2ChJldmVudF9jcmVhdGVkX3RpbWUYAiABKAsyGi5nb29n",
            "bGUucHJvdG9idWYuVGltZXN0YW1wEi8KFGV2ZW50X2VmZmVjdGl2ZV9kYXRl",
            "GAMgASgLMhEuZ29vZ2xlLnR5cGUuRGF0ZRISCgpldmVudF90eXBlGAQgASgJ",
            "IpsCChBMZWFzZU9ic2VydmF0aW9uEisKEG9ic2VydmF0aW9uX2RhdGUYASAB",
            "KAsyES5nb29nbGUudHlwZS5EYXRlEicKBWxlYXNlGAIgASgLMhgudHV0b3Jp",
            "YWwubGVhc2UudjEuTGVhc2USKwoPdG90YWxfc2NoZWR1bGVkGAMgASgLMhIu",
            "Z29vZ2xlLnR5cGUuTW9uZXkSJgoKdG90YWxfcGFpZBgEIAEoCzISLmdvb2ds",
            "ZS50eXBlLk1vbmV5EiYKCmFtb3VudF9kdWUYBSABKAsyEi5nb29nbGUudHlw",
            "ZS5Nb25leRI0CgxsZWFzZV9zdGF0dXMYBiABKA4yHi50dXRvcmlhbC5sZWFz",
            "ZS52MS5MZWFzZVN0YXR1cypiCgtMZWFzZVN0YXR1cxIYChRMRUFTRV9TVEFU",
            "VVNfSU5WQUxJRBAAEhwKGExFQVNFX1NUQVRVU19PVVRTVEFORElORxABEhsK",
            "F0xFQVNFX1NUQVRVU19URVJNSU5BVEVEEAJCXAoVY29tLnR1dG9yaWFsLmxl",
            "YXNlLnYxQgpMZWFzZVByb3RvUAFaB2xlYXNldjGiAgNUTFiqAhFUdXRvcmlh",
            "bC5MZWFzZS5WMcoCEVR1dG9yaWFsXExlYXNlXFYxYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Google.Type.DateReflection.Descriptor, global::Google.Type.MoneyReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Tutorial.Lease.V1.LeaseStatus), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Tutorial.Lease.V1.AsOfDate), global::Tutorial.Lease.V1.AsOfDate.Parser, new[]{ "AsAtTime", "AsOnDate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tutorial.Lease.V1.Lease), global::Tutorial.Lease.V1.Lease.Parser, new[]{ "LeaseId", "UserId", "StartDate", "MaturityDate", "MonthlyPaymentAmount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tutorial.Lease.V1.NewLease), global::Tutorial.Lease.V1.NewLease.Parser, new[]{ "UserId", "MaturityDate", "MonthlyPaymentAmount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tutorial.Lease.V1.Payment), global::Tutorial.Lease.V1.Payment.Parser, new[]{ "PaymentId", "PaymentAmount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tutorial.Lease.V1.LeaseEvent), global::Tutorial.Lease.V1.LeaseEvent.Parser, new[]{ "EventId", "EventCreatedTime", "EventEffectiveDate", "EventType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tutorial.Lease.V1.LeaseObservation), global::Tutorial.Lease.V1.LeaseObservation.Parser, new[]{ "ObservationDate", "Lease", "TotalScheduled", "TotalPaid", "AmountDue", "LeaseStatus" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// Status of the lease.
  /// </summary>
  public enum LeaseStatus {
    [pbr::OriginalName("LEASE_STATUS_INVALID")] Invalid = 0,
    [pbr::OriginalName("LEASE_STATUS_OUTSTANDING")] Outstanding = 1,
    [pbr::OriginalName("LEASE_STATUS_TERMINATED")] Terminated = 2,
  }

  #endregion

  #region Messages
  /// <summary>
  /// Date at which a lease is observed.
  /// </summary>
  public sealed partial class AsOfDate : pb::IMessage<AsOfDate> {
    private static readonly pb::MessageParser<AsOfDate> _parser = new pb::MessageParser<AsOfDate>(() => new AsOfDate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AsOfDate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tutorial.Lease.V1.LeaseReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AsOfDate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AsOfDate(AsOfDate other) : this() {
      asAtTime_ = other.asAtTime_ != null ? other.asAtTime_.Clone() : null;
      asOnDate_ = other.asOnDate_ != null ? other.asOnDate_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AsOfDate Clone() {
      return new AsOfDate(this);
    }

    /// <summary>Field number for the "as_at_time" field.</summary>
    public const int AsAtTimeFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Timestamp asAtTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp AsAtTime {
      get { return asAtTime_; }
      set {
        asAtTime_ = value;
      }
    }

    /// <summary>Field number for the "as_on_date" field.</summary>
    public const int AsOnDateFieldNumber = 2;
    private global::Google.Type.Date asOnDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Type.Date AsOnDate {
      get { return asOnDate_; }
      set {
        asOnDate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AsOfDate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AsOfDate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(AsAtTime, other.AsAtTime)) return false;
      if (!object.Equals(AsOnDate, other.AsOnDate)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (asAtTime_ != null) hash ^= AsAtTime.GetHashCode();
      if (asOnDate_ != null) hash ^= AsOnDate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (asAtTime_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(AsAtTime);
      }
      if (asOnDate_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(AsOnDate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (asAtTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AsAtTime);
      }
      if (asOnDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AsOnDate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AsOfDate other) {
      if (other == null) {
        return;
      }
      if (other.asAtTime_ != null) {
        if (asAtTime_ == null) {
          AsAtTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        AsAtTime.MergeFrom(other.AsAtTime);
      }
      if (other.asOnDate_ != null) {
        if (asOnDate_ == null) {
          AsOnDate = new global::Google.Type.Date();
        }
        AsOnDate.MergeFrom(other.AsOnDate);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (asAtTime_ == null) {
              AsAtTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(AsAtTime);
            break;
          }
          case 18: {
            if (asOnDate_ == null) {
              AsOnDate = new global::Google.Type.Date();
            }
            input.ReadMessage(AsOnDate);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Lease that has been created.
  /// </summary>
  public sealed partial class Lease : pb::IMessage<Lease> {
    private static readonly pb::MessageParser<Lease> _parser = new pb::MessageParser<Lease>(() => new Lease());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Lease> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tutorial.Lease.V1.LeaseReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Lease() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Lease(Lease other) : this() {
      leaseId_ = other.leaseId_;
      userId_ = other.userId_;
      startDate_ = other.startDate_ != null ? other.startDate_.Clone() : null;
      maturityDate_ = other.maturityDate_ != null ? other.maturityDate_.Clone() : null;
      monthlyPaymentAmount_ = other.monthlyPaymentAmount_ != null ? other.monthlyPaymentAmount_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Lease Clone() {
      return new Lease(this);
    }

    /// <summary>Field number for the "lease_id" field.</summary>
    public const int LeaseIdFieldNumber = 1;
    private string leaseId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LeaseId {
      get { return leaseId_; }
      set {
        leaseId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 2;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "start_date" field.</summary>
    public const int StartDateFieldNumber = 3;
    private global::Google.Type.Date startDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Type.Date StartDate {
      get { return startDate_; }
      set {
        startDate_ = value;
      }
    }

    /// <summary>Field number for the "maturity_date" field.</summary>
    public const int MaturityDateFieldNumber = 4;
    private global::Google.Type.Date maturityDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Type.Date MaturityDate {
      get { return maturityDate_; }
      set {
        maturityDate_ = value;
      }
    }

    /// <summary>Field number for the "monthly_payment_amount" field.</summary>
    public const int MonthlyPaymentAmountFieldNumber = 5;
    private global::Google.Type.Money monthlyPaymentAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Type.Money MonthlyPaymentAmount {
      get { return monthlyPaymentAmount_; }
      set {
        monthlyPaymentAmount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Lease);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Lease other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LeaseId != other.LeaseId) return false;
      if (UserId != other.UserId) return false;
      if (!object.Equals(StartDate, other.StartDate)) return false;
      if (!object.Equals(MaturityDate, other.MaturityDate)) return false;
      if (!object.Equals(MonthlyPaymentAmount, other.MonthlyPaymentAmount)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LeaseId.Length != 0) hash ^= LeaseId.GetHashCode();
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (startDate_ != null) hash ^= StartDate.GetHashCode();
      if (maturityDate_ != null) hash ^= MaturityDate.GetHashCode();
      if (monthlyPaymentAmount_ != null) hash ^= MonthlyPaymentAmount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LeaseId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LeaseId);
      }
      if (UserId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UserId);
      }
      if (startDate_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(StartDate);
      }
      if (maturityDate_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(MaturityDate);
      }
      if (monthlyPaymentAmount_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(MonthlyPaymentAmount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LeaseId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LeaseId);
      }
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (startDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartDate);
      }
      if (maturityDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MaturityDate);
      }
      if (monthlyPaymentAmount_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MonthlyPaymentAmount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Lease other) {
      if (other == null) {
        return;
      }
      if (other.LeaseId.Length != 0) {
        LeaseId = other.LeaseId;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.startDate_ != null) {
        if (startDate_ == null) {
          StartDate = new global::Google.Type.Date();
        }
        StartDate.MergeFrom(other.StartDate);
      }
      if (other.maturityDate_ != null) {
        if (maturityDate_ == null) {
          MaturityDate = new global::Google.Type.Date();
        }
        MaturityDate.MergeFrom(other.MaturityDate);
      }
      if (other.monthlyPaymentAmount_ != null) {
        if (monthlyPaymentAmount_ == null) {
          MonthlyPaymentAmount = new global::Google.Type.Money();
        }
        MonthlyPaymentAmount.MergeFrom(other.MonthlyPaymentAmount);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            LeaseId = input.ReadString();
            break;
          }
          case 18: {
            UserId = input.ReadString();
            break;
          }
          case 26: {
            if (startDate_ == null) {
              StartDate = new global::Google.Type.Date();
            }
            input.ReadMessage(StartDate);
            break;
          }
          case 34: {
            if (maturityDate_ == null) {
              MaturityDate = new global::Google.Type.Date();
            }
            input.ReadMessage(MaturityDate);
            break;
          }
          case 42: {
            if (monthlyPaymentAmount_ == null) {
              MonthlyPaymentAmount = new global::Google.Type.Money();
            }
            input.ReadMessage(MonthlyPaymentAmount);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Payload to create a new lease.
  /// </summary>
  public sealed partial class NewLease : pb::IMessage<NewLease> {
    private static readonly pb::MessageParser<NewLease> _parser = new pb::MessageParser<NewLease>(() => new NewLease());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NewLease> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tutorial.Lease.V1.LeaseReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewLease() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewLease(NewLease other) : this() {
      userId_ = other.userId_;
      maturityDate_ = other.maturityDate_ != null ? other.maturityDate_.Clone() : null;
      monthlyPaymentAmount_ = other.monthlyPaymentAmount_ != null ? other.monthlyPaymentAmount_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewLease Clone() {
      return new NewLease(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "maturity_date" field.</summary>
    public const int MaturityDateFieldNumber = 3;
    private global::Google.Type.Date maturityDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Type.Date MaturityDate {
      get { return maturityDate_; }
      set {
        maturityDate_ = value;
      }
    }

    /// <summary>Field number for the "monthly_payment_amount" field.</summary>
    public const int MonthlyPaymentAmountFieldNumber = 4;
    private global::Google.Type.Money monthlyPaymentAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Type.Money MonthlyPaymentAmount {
      get { return monthlyPaymentAmount_; }
      set {
        monthlyPaymentAmount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NewLease);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NewLease other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (!object.Equals(MaturityDate, other.MaturityDate)) return false;
      if (!object.Equals(MonthlyPaymentAmount, other.MonthlyPaymentAmount)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (maturityDate_ != null) hash ^= MaturityDate.GetHashCode();
      if (monthlyPaymentAmount_ != null) hash ^= MonthlyPaymentAmount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (maturityDate_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(MaturityDate);
      }
      if (monthlyPaymentAmount_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(MonthlyPaymentAmount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (maturityDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MaturityDate);
      }
      if (monthlyPaymentAmount_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MonthlyPaymentAmount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NewLease other) {
      if (other == null) {
        return;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.maturityDate_ != null) {
        if (maturityDate_ == null) {
          MaturityDate = new global::Google.Type.Date();
        }
        MaturityDate.MergeFrom(other.MaturityDate);
      }
      if (other.monthlyPaymentAmount_ != null) {
        if (monthlyPaymentAmount_ == null) {
          MonthlyPaymentAmount = new global::Google.Type.Money();
        }
        MonthlyPaymentAmount.MergeFrom(other.MonthlyPaymentAmount);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 26: {
            if (maturityDate_ == null) {
              MaturityDate = new global::Google.Type.Date();
            }
            input.ReadMessage(MaturityDate);
            break;
          }
          case 34: {
            if (monthlyPaymentAmount_ == null) {
              MonthlyPaymentAmount = new global::Google.Type.Money();
            }
            input.ReadMessage(MonthlyPaymentAmount);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Scheduled or received payment.
  /// </summary>
  public sealed partial class Payment : pb::IMessage<Payment> {
    private static readonly pb::MessageParser<Payment> _parser = new pb::MessageParser<Payment>(() => new Payment());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Payment> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tutorial.Lease.V1.LeaseReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Payment() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Payment(Payment other) : this() {
      paymentId_ = other.paymentId_;
      paymentAmount_ = other.paymentAmount_ != null ? other.paymentAmount_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Payment Clone() {
      return new Payment(this);
    }

    /// <summary>Field number for the "payment_id" field.</summary>
    public const int PaymentIdFieldNumber = 1;
    private string paymentId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PaymentId {
      get { return paymentId_; }
      set {
        paymentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payment_amount" field.</summary>
    public const int PaymentAmountFieldNumber = 2;
    private global::Google.Type.Money paymentAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Type.Money PaymentAmount {
      get { return paymentAmount_; }
      set {
        paymentAmount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Payment);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Payment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PaymentId != other.PaymentId) return false;
      if (!object.Equals(PaymentAmount, other.PaymentAmount)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PaymentId.Length != 0) hash ^= PaymentId.GetHashCode();
      if (paymentAmount_ != null) hash ^= PaymentAmount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PaymentId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PaymentId);
      }
      if (paymentAmount_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PaymentAmount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PaymentId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PaymentId);
      }
      if (paymentAmount_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PaymentAmount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Payment other) {
      if (other == null) {
        return;
      }
      if (other.PaymentId.Length != 0) {
        PaymentId = other.PaymentId;
      }
      if (other.paymentAmount_ != null) {
        if (paymentAmount_ == null) {
          PaymentAmount = new global::Google.Type.Money();
        }
        PaymentAmount.MergeFrom(other.PaymentAmount);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PaymentId = input.ReadString();
            break;
          }
          case 18: {
            if (paymentAmount_ == null) {
              PaymentAmount = new global::Google.Type.Money();
            }
            input.ReadMessage(PaymentAmount);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Lease event that has occurred.
  /// </summary>
  public sealed partial class LeaseEvent : pb::IMessage<LeaseEvent> {
    private static readonly pb::MessageParser<LeaseEvent> _parser = new pb::MessageParser<LeaseEvent>(() => new LeaseEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LeaseEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tutorial.Lease.V1.LeaseReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaseEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaseEvent(LeaseEvent other) : this() {
      eventId_ = other.eventId_;
      eventCreatedTime_ = other.eventCreatedTime_ != null ? other.eventCreatedTime_.Clone() : null;
      eventEffectiveDate_ = other.eventEffectiveDate_ != null ? other.eventEffectiveDate_.Clone() : null;
      eventType_ = other.eventType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaseEvent Clone() {
      return new LeaseEvent(this);
    }

    /// <summary>Field number for the "event_id" field.</summary>
    public const int EventIdFieldNumber = 1;
    private int eventId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventId {
      get { return eventId_; }
      set {
        eventId_ = value;
      }
    }

    /// <summary>Field number for the "event_created_time" field.</summary>
    public const int EventCreatedTimeFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp eventCreatedTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp EventCreatedTime {
      get { return eventCreatedTime_; }
      set {
        eventCreatedTime_ = value;
      }
    }

    /// <summary>Field number for the "event_effective_date" field.</summary>
    public const int EventEffectiveDateFieldNumber = 3;
    private global::Google.Type.Date eventEffectiveDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Type.Date EventEffectiveDate {
      get { return eventEffectiveDate_; }
      set {
        eventEffectiveDate_ = value;
      }
    }

    /// <summary>Field number for the "event_type" field.</summary>
    public const int EventTypeFieldNumber = 4;
    private string eventType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EventType {
      get { return eventType_; }
      set {
        eventType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LeaseEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LeaseEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventId != other.EventId) return false;
      if (!object.Equals(EventCreatedTime, other.EventCreatedTime)) return false;
      if (!object.Equals(EventEffectiveDate, other.EventEffectiveDate)) return false;
      if (EventType != other.EventType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EventId != 0) hash ^= EventId.GetHashCode();
      if (eventCreatedTime_ != null) hash ^= EventCreatedTime.GetHashCode();
      if (eventEffectiveDate_ != null) hash ^= EventEffectiveDate.GetHashCode();
      if (EventType.Length != 0) hash ^= EventType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EventId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EventId);
      }
      if (eventCreatedTime_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(EventCreatedTime);
      }
      if (eventEffectiveDate_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(EventEffectiveDate);
      }
      if (EventType.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EventType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EventId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventId);
      }
      if (eventCreatedTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EventCreatedTime);
      }
      if (eventEffectiveDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EventEffectiveDate);
      }
      if (EventType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EventType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LeaseEvent other) {
      if (other == null) {
        return;
      }
      if (other.EventId != 0) {
        EventId = other.EventId;
      }
      if (other.eventCreatedTime_ != null) {
        if (eventCreatedTime_ == null) {
          EventCreatedTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        EventCreatedTime.MergeFrom(other.EventCreatedTime);
      }
      if (other.eventEffectiveDate_ != null) {
        if (eventEffectiveDate_ == null) {
          EventEffectiveDate = new global::Google.Type.Date();
        }
        EventEffectiveDate.MergeFrom(other.EventEffectiveDate);
      }
      if (other.EventType.Length != 0) {
        EventType = other.EventType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EventId = input.ReadInt32();
            break;
          }
          case 18: {
            if (eventCreatedTime_ == null) {
              EventCreatedTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(EventCreatedTime);
            break;
          }
          case 26: {
            if (eventEffectiveDate_ == null) {
              EventEffectiveDate = new global::Google.Type.Date();
            }
            input.ReadMessage(EventEffectiveDate);
            break;
          }
          case 34: {
            EventType = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Observation of a lease at a point in time.
  /// </summary>
  public sealed partial class LeaseObservation : pb::IMessage<LeaseObservation> {
    private static readonly pb::MessageParser<LeaseObservation> _parser = new pb::MessageParser<LeaseObservation>(() => new LeaseObservation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LeaseObservation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tutorial.Lease.V1.LeaseReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaseObservation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaseObservation(LeaseObservation other) : this() {
      observationDate_ = other.observationDate_ != null ? other.observationDate_.Clone() : null;
      lease_ = other.lease_ != null ? other.lease_.Clone() : null;
      totalScheduled_ = other.totalScheduled_ != null ? other.totalScheduled_.Clone() : null;
      totalPaid_ = other.totalPaid_ != null ? other.totalPaid_.Clone() : null;
      amountDue_ = other.amountDue_ != null ? other.amountDue_.Clone() : null;
      leaseStatus_ = other.leaseStatus_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaseObservation Clone() {
      return new LeaseObservation(this);
    }

    /// <summary>Field number for the "observation_date" field.</summary>
    public const int ObservationDateFieldNumber = 1;
    private global::Google.Type.Date observationDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Type.Date ObservationDate {
      get { return observationDate_; }
      set {
        observationDate_ = value;
      }
    }

    /// <summary>Field number for the "lease" field.</summary>
    public const int LeaseFieldNumber = 2;
    private global::Tutorial.Lease.V1.Lease lease_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tutorial.Lease.V1.Lease Lease {
      get { return lease_; }
      set {
        lease_ = value;
      }
    }

    /// <summary>Field number for the "total_scheduled" field.</summary>
    public const int TotalScheduledFieldNumber = 3;
    private global::Google.Type.Money totalScheduled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Type.Money TotalScheduled {
      get { return totalScheduled_; }
      set {
        totalScheduled_ = value;
      }
    }

    /// <summary>Field number for the "total_paid" field.</summary>
    public const int TotalPaidFieldNumber = 4;
    private global::Google.Type.Money totalPaid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Type.Money TotalPaid {
      get { return totalPaid_; }
      set {
        totalPaid_ = value;
      }
    }

    /// <summary>Field number for the "amount_due" field.</summary>
    public const int AmountDueFieldNumber = 5;
    private global::Google.Type.Money amountDue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Type.Money AmountDue {
      get { return amountDue_; }
      set {
        amountDue_ = value;
      }
    }

    /// <summary>Field number for the "lease_status" field.</summary>
    public const int LeaseStatusFieldNumber = 6;
    private global::Tutorial.Lease.V1.LeaseStatus leaseStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tutorial.Lease.V1.LeaseStatus LeaseStatus {
      get { return leaseStatus_; }
      set {
        leaseStatus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LeaseObservation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LeaseObservation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ObservationDate, other.ObservationDate)) return false;
      if (!object.Equals(Lease, other.Lease)) return false;
      if (!object.Equals(TotalScheduled, other.TotalScheduled)) return false;
      if (!object.Equals(TotalPaid, other.TotalPaid)) return false;
      if (!object.Equals(AmountDue, other.AmountDue)) return false;
      if (LeaseStatus != other.LeaseStatus) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (observationDate_ != null) hash ^= ObservationDate.GetHashCode();
      if (lease_ != null) hash ^= Lease.GetHashCode();
      if (totalScheduled_ != null) hash ^= TotalScheduled.GetHashCode();
      if (totalPaid_ != null) hash ^= TotalPaid.GetHashCode();
      if (amountDue_ != null) hash ^= AmountDue.GetHashCode();
      if (LeaseStatus != 0) hash ^= LeaseStatus.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (observationDate_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ObservationDate);
      }
      if (lease_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Lease);
      }
      if (totalScheduled_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(TotalScheduled);
      }
      if (totalPaid_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(TotalPaid);
      }
      if (amountDue_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(AmountDue);
      }
      if (LeaseStatus != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) LeaseStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (observationDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ObservationDate);
      }
      if (lease_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Lease);
      }
      if (totalScheduled_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TotalScheduled);
      }
      if (totalPaid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TotalPaid);
      }
      if (amountDue_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AmountDue);
      }
      if (LeaseStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LeaseStatus);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LeaseObservation other) {
      if (other == null) {
        return;
      }
      if (other.observationDate_ != null) {
        if (observationDate_ == null) {
          ObservationDate = new global::Google.Type.Date();
        }
        ObservationDate.MergeFrom(other.ObservationDate);
      }
      if (other.lease_ != null) {
        if (lease_ == null) {
          Lease = new global::Tutorial.Lease.V1.Lease();
        }
        Lease.MergeFrom(other.Lease);
      }
      if (other.totalScheduled_ != null) {
        if (totalScheduled_ == null) {
          TotalScheduled = new global::Google.Type.Money();
        }
        TotalScheduled.MergeFrom(other.TotalScheduled);
      }
      if (other.totalPaid_ != null) {
        if (totalPaid_ == null) {
          TotalPaid = new global::Google.Type.Money();
        }
        TotalPaid.MergeFrom(other.TotalPaid);
      }
      if (other.amountDue_ != null) {
        if (amountDue_ == null) {
          AmountDue = new global::Google.Type.Money();
        }
        AmountDue.MergeFrom(other.AmountDue);
      }
      if (other.LeaseStatus != 0) {
        LeaseStatus = other.LeaseStatus;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (observationDate_ == null) {
              ObservationDate = new global::Google.Type.Date();
            }
            input.ReadMessage(ObservationDate);
            break;
          }
          case 18: {
            if (lease_ == null) {
              Lease = new global::Tutorial.Lease.V1.Lease();
            }
            input.ReadMessage(Lease);
            break;
          }
          case 26: {
            if (totalScheduled_ == null) {
              TotalScheduled = new global::Google.Type.Money();
            }
            input.ReadMessage(TotalScheduled);
            break;
          }
          case 34: {
            if (totalPaid_ == null) {
              TotalPaid = new global::Google.Type.Money();
            }
            input.ReadMessage(TotalPaid);
            break;
          }
          case 42: {
            if (amountDue_ == null) {
              AmountDue = new global::Google.Type.Money();
            }
            input.ReadMessage(AmountDue);
            break;
          }
          case 48: {
            LeaseStatus = (global::Tutorial.Lease.V1.LeaseStatus) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
