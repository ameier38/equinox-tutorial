// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tutorial/lease/v1/lease.proto

package leasev1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	date "google.golang.org/genproto/googleapis/type/date"
	money "google.golang.org/genproto/googleapis/type/money"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Status of the lease.
type LeaseStatus int32

const (
	LeaseStatus_LEASE_STATUS_INVALID     LeaseStatus = 0
	LeaseStatus_LEASE_STATUS_OUTSTANDING LeaseStatus = 1
	LeaseStatus_LEASE_STATUS_TERMINATED  LeaseStatus = 2
)

var LeaseStatus_name = map[int32]string{
	0: "LEASE_STATUS_INVALID",
	1: "LEASE_STATUS_OUTSTANDING",
	2: "LEASE_STATUS_TERMINATED",
}

var LeaseStatus_value = map[string]int32{
	"LEASE_STATUS_INVALID":     0,
	"LEASE_STATUS_OUTSTANDING": 1,
	"LEASE_STATUS_TERMINATED":  2,
}

func (x LeaseStatus) String() string {
	return proto.EnumName(LeaseStatus_name, int32(x))
}

func (LeaseStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2c48537c49f7f0bd, []int{0}
}

// Date at which a lease is observed.
type AsOfDate struct {
	AsAtTime             *timestamp.Timestamp `protobuf:"bytes,1,opt,name=as_at_time,json=asAtTime,proto3" json:"as_at_time,omitempty"`
	AsOnDate             *date.Date           `protobuf:"bytes,2,opt,name=as_on_date,json=asOnDate,proto3" json:"as_on_date,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *AsOfDate) Reset()         { *m = AsOfDate{} }
func (m *AsOfDate) String() string { return proto.CompactTextString(m) }
func (*AsOfDate) ProtoMessage()    {}
func (*AsOfDate) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c48537c49f7f0bd, []int{0}
}

func (m *AsOfDate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AsOfDate.Unmarshal(m, b)
}
func (m *AsOfDate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AsOfDate.Marshal(b, m, deterministic)
}
func (m *AsOfDate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AsOfDate.Merge(m, src)
}
func (m *AsOfDate) XXX_Size() int {
	return xxx_messageInfo_AsOfDate.Size(m)
}
func (m *AsOfDate) XXX_DiscardUnknown() {
	xxx_messageInfo_AsOfDate.DiscardUnknown(m)
}

var xxx_messageInfo_AsOfDate proto.InternalMessageInfo

func (m *AsOfDate) GetAsAtTime() *timestamp.Timestamp {
	if m != nil {
		return m.AsAtTime
	}
	return nil
}

func (m *AsOfDate) GetAsOnDate() *date.Date {
	if m != nil {
		return m.AsOnDate
	}
	return nil
}

// Lease static information.
type Lease struct {
	LeaseId              string       `protobuf:"bytes,1,opt,name=lease_id,json=leaseId,proto3" json:"lease_id,omitempty"`
	UserId               string       `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	StartDate            *date.Date   `protobuf:"bytes,3,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	MaturityDate         *date.Date   `protobuf:"bytes,4,opt,name=maturity_date,json=maturityDate,proto3" json:"maturity_date,omitempty"`
	MonthlyPaymentAmount *money.Money `protobuf:"bytes,5,opt,name=monthly_payment_amount,json=monthlyPaymentAmount,proto3" json:"monthly_payment_amount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Lease) Reset()         { *m = Lease{} }
func (m *Lease) String() string { return proto.CompactTextString(m) }
func (*Lease) ProtoMessage()    {}
func (*Lease) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c48537c49f7f0bd, []int{1}
}

func (m *Lease) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Lease.Unmarshal(m, b)
}
func (m *Lease) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Lease.Marshal(b, m, deterministic)
}
func (m *Lease) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Lease.Merge(m, src)
}
func (m *Lease) XXX_Size() int {
	return xxx_messageInfo_Lease.Size(m)
}
func (m *Lease) XXX_DiscardUnknown() {
	xxx_messageInfo_Lease.DiscardUnknown(m)
}

var xxx_messageInfo_Lease proto.InternalMessageInfo

func (m *Lease) GetLeaseId() string {
	if m != nil {
		return m.LeaseId
	}
	return ""
}

func (m *Lease) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *Lease) GetStartDate() *date.Date {
	if m != nil {
		return m.StartDate
	}
	return nil
}

func (m *Lease) GetMaturityDate() *date.Date {
	if m != nil {
		return m.MaturityDate
	}
	return nil
}

func (m *Lease) GetMonthlyPaymentAmount() *money.Money {
	if m != nil {
		return m.MonthlyPaymentAmount
	}
	return nil
}

// Scheduled or received payment.
type Payment struct {
	PaymentId            string       `protobuf:"bytes,1,opt,name=payment_id,json=paymentId,proto3" json:"payment_id,omitempty"`
	PaymentDate          *date.Date   `protobuf:"bytes,2,opt,name=payment_date,json=paymentDate,proto3" json:"payment_date,omitempty"`
	PaymentAmount        *money.Money `protobuf:"bytes,3,opt,name=payment_amount,json=paymentAmount,proto3" json:"payment_amount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Payment) Reset()         { *m = Payment{} }
func (m *Payment) String() string { return proto.CompactTextString(m) }
func (*Payment) ProtoMessage()    {}
func (*Payment) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c48537c49f7f0bd, []int{2}
}

func (m *Payment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Payment.Unmarshal(m, b)
}
func (m *Payment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Payment.Marshal(b, m, deterministic)
}
func (m *Payment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Payment.Merge(m, src)
}
func (m *Payment) XXX_Size() int {
	return xxx_messageInfo_Payment.Size(m)
}
func (m *Payment) XXX_DiscardUnknown() {
	xxx_messageInfo_Payment.DiscardUnknown(m)
}

var xxx_messageInfo_Payment proto.InternalMessageInfo

func (m *Payment) GetPaymentId() string {
	if m != nil {
		return m.PaymentId
	}
	return ""
}

func (m *Payment) GetPaymentDate() *date.Date {
	if m != nil {
		return m.PaymentDate
	}
	return nil
}

func (m *Payment) GetPaymentAmount() *money.Money {
	if m != nil {
		return m.PaymentAmount
	}
	return nil
}

// Lease event that has occurred.
type LeaseEvent struct {
	EventId              int32                `protobuf:"varint,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	EventCreatedTime     *timestamp.Timestamp `protobuf:"bytes,2,opt,name=event_created_time,json=eventCreatedTime,proto3" json:"event_created_time,omitempty"`
	EventEffectiveDate   *date.Date           `protobuf:"bytes,3,opt,name=event_effective_date,json=eventEffectiveDate,proto3" json:"event_effective_date,omitempty"`
	EventType            string               `protobuf:"bytes,4,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *LeaseEvent) Reset()         { *m = LeaseEvent{} }
func (m *LeaseEvent) String() string { return proto.CompactTextString(m) }
func (*LeaseEvent) ProtoMessage()    {}
func (*LeaseEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c48537c49f7f0bd, []int{3}
}

func (m *LeaseEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LeaseEvent.Unmarshal(m, b)
}
func (m *LeaseEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LeaseEvent.Marshal(b, m, deterministic)
}
func (m *LeaseEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeaseEvent.Merge(m, src)
}
func (m *LeaseEvent) XXX_Size() int {
	return xxx_messageInfo_LeaseEvent.Size(m)
}
func (m *LeaseEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_LeaseEvent.DiscardUnknown(m)
}

var xxx_messageInfo_LeaseEvent proto.InternalMessageInfo

func (m *LeaseEvent) GetEventId() int32 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (m *LeaseEvent) GetEventCreatedTime() *timestamp.Timestamp {
	if m != nil {
		return m.EventCreatedTime
	}
	return nil
}

func (m *LeaseEvent) GetEventEffectiveDate() *date.Date {
	if m != nil {
		return m.EventEffectiveDate
	}
	return nil
}

func (m *LeaseEvent) GetEventType() string {
	if m != nil {
		return m.EventType
	}
	return ""
}

// Observation of a lease at a point in time.
type LeaseObservation struct {
	Lease                *Lease       `protobuf:"bytes,1,opt,name=lease,proto3" json:"lease,omitempty"`
	TotalScheduled       *money.Money `protobuf:"bytes,2,opt,name=total_scheduled,json=totalScheduled,proto3" json:"total_scheduled,omitempty"`
	TotalPaid            *money.Money `protobuf:"bytes,3,opt,name=total_paid,json=totalPaid,proto3" json:"total_paid,omitempty"`
	AmountDue            *money.Money `protobuf:"bytes,4,opt,name=amount_due,json=amountDue,proto3" json:"amount_due,omitempty"`
	LeaseStatus          LeaseStatus  `protobuf:"varint,5,opt,name=lease_status,json=leaseStatus,proto3,enum=tutorial.lease.v1.LeaseStatus" json:"lease_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *LeaseObservation) Reset()         { *m = LeaseObservation{} }
func (m *LeaseObservation) String() string { return proto.CompactTextString(m) }
func (*LeaseObservation) ProtoMessage()    {}
func (*LeaseObservation) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c48537c49f7f0bd, []int{4}
}

func (m *LeaseObservation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LeaseObservation.Unmarshal(m, b)
}
func (m *LeaseObservation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LeaseObservation.Marshal(b, m, deterministic)
}
func (m *LeaseObservation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeaseObservation.Merge(m, src)
}
func (m *LeaseObservation) XXX_Size() int {
	return xxx_messageInfo_LeaseObservation.Size(m)
}
func (m *LeaseObservation) XXX_DiscardUnknown() {
	xxx_messageInfo_LeaseObservation.DiscardUnknown(m)
}

var xxx_messageInfo_LeaseObservation proto.InternalMessageInfo

func (m *LeaseObservation) GetLease() *Lease {
	if m != nil {
		return m.Lease
	}
	return nil
}

func (m *LeaseObservation) GetTotalScheduled() *money.Money {
	if m != nil {
		return m.TotalScheduled
	}
	return nil
}

func (m *LeaseObservation) GetTotalPaid() *money.Money {
	if m != nil {
		return m.TotalPaid
	}
	return nil
}

func (m *LeaseObservation) GetAmountDue() *money.Money {
	if m != nil {
		return m.AmountDue
	}
	return nil
}

func (m *LeaseObservation) GetLeaseStatus() LeaseStatus {
	if m != nil {
		return m.LeaseStatus
	}
	return LeaseStatus_LEASE_STATUS_INVALID
}

func init() {
	proto.RegisterEnum("tutorial.lease.v1.LeaseStatus", LeaseStatus_name, LeaseStatus_value)
	proto.RegisterType((*AsOfDate)(nil), "tutorial.lease.v1.AsOfDate")
	proto.RegisterType((*Lease)(nil), "tutorial.lease.v1.Lease")
	proto.RegisterType((*Payment)(nil), "tutorial.lease.v1.Payment")
	proto.RegisterType((*LeaseEvent)(nil), "tutorial.lease.v1.LeaseEvent")
	proto.RegisterType((*LeaseObservation)(nil), "tutorial.lease.v1.LeaseObservation")
}

func init() { proto.RegisterFile("tutorial/lease/v1/lease.proto", fileDescriptor_2c48537c49f7f0bd) }

var fileDescriptor_2c48537c49f7f0bd = []byte{
	// 655 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x53, 0xcf, 0x6e, 0xd3, 0x4e,
	0x10, 0xfe, 0xd9, 0xfd, 0xa5, 0x49, 0x26, 0x6d, 0x49, 0x57, 0xa5, 0x4d, 0x03, 0x05, 0x94, 0x13,
	0xe2, 0xe0, 0x90, 0x82, 0x10, 0x88, 0x93, 0xdb, 0x44, 0xd4, 0x52, 0x9a, 0x44, 0x8e, 0x5b, 0x21,
	0x54, 0xc9, 0xda, 0xc4, 0x9b, 0xd6, 0x92, 0xff, 0xc9, 0x5e, 0x5b, 0xf2, 0xa3, 0x70, 0xe5, 0x84,
	0x78, 0x14, 0xee, 0x3c, 0x07, 0xaf, 0x80, 0x76, 0xd6, 0xa6, 0x0d, 0x6d, 0xda, 0x9b, 0x67, 0xe6,
	0xfb, 0xe6, 0x9b, 0xf1, 0x7c, 0x0b, 0x07, 0x3c, 0xe5, 0x61, 0xec, 0x52, 0xaf, 0xeb, 0x31, 0x9a,
	0xb0, 0x6e, 0xd6, 0x93, 0x1f, 0x5a, 0x14, 0x87, 0x3c, 0x24, 0xdb, 0x65, 0x59, 0x93, 0xd9, 0xac,
	0xd7, 0x7e, 0x7e, 0x19, 0x86, 0x97, 0x1e, 0xeb, 0x22, 0x60, 0x96, 0x2e, 0xba, 0xdc, 0xf5, 0x59,
	0xc2, 0xa9, 0x1f, 0x49, 0x4e, 0x7b, 0xb7, 0x00, 0xf0, 0x3c, 0x62, 0x5d, 0x87, 0xf2, 0xa2, 0x57,
	0x7b, 0xef, 0x66, 0xde, 0x0f, 0x03, 0x96, 0xcb, 0x42, 0x27, 0x85, 0x9a, 0x9e, 0x8c, 0x17, 0x7d,
	0xca, 0x19, 0x79, 0x0f, 0x40, 0x13, 0x9b, 0x72, 0x5b, 0x74, 0x6d, 0x29, 0x2f, 0x94, 0x97, 0x8d,
	0xc3, 0xb6, 0x26, 0x99, 0x5a, 0x29, 0xa9, 0x59, 0xa5, 0xa4, 0x59, 0xa3, 0x89, 0xce, 0x45, 0x48,
	0xba, 0xc8, 0x0c, 0x03, 0x5b, 0x48, 0xb6, 0x54, 0x64, 0x6e, 0x97, 0x4c, 0xa1, 0xa9, 0x09, 0x01,
	0x41, 0x18, 0x07, 0xe2, 0xab, 0xf3, 0x5b, 0x81, 0xca, 0x50, 0x6c, 0x45, 0xf6, 0xa1, 0x86, 0xeb,
	0xd9, 0xae, 0x83, 0x92, 0x75, 0xb3, 0x8a, 0xb1, 0xe1, 0x90, 0x3d, 0xa8, 0xa6, 0x09, 0x8b, 0x45,
	0x45, 0xc5, 0xca, 0xba, 0x08, 0x0d, 0x87, 0xbc, 0x06, 0x48, 0x38, 0x8d, 0xb9, 0x94, 0x5b, 0x5b,
	0x25, 0x57, 0x47, 0x10, 0xae, 0xf6, 0x0e, 0x36, 0x7d, 0xca, 0xd3, 0xd8, 0xe5, 0xb9, 0x24, 0xfd,
	0xbf, 0x8a, 0xb4, 0x51, 0xe2, 0x90, 0x77, 0x02, 0xbb, 0x7e, 0x18, 0xf0, 0x2b, 0x2f, 0xb7, 0x23,
	0x9a, 0xfb, 0x2c, 0xe0, 0x36, 0xf5, 0xc3, 0x34, 0xe0, 0xad, 0x0a, 0x36, 0x20, 0x4b, 0x0d, 0x4e,
	0xc5, 0x8f, 0x35, 0x77, 0x0a, 0xc6, 0x44, 0x12, 0x74, 0xc4, 0x77, 0xbe, 0x2a, 0x50, 0x2d, 0x32,
	0xe4, 0x00, 0xa0, 0xec, 0xf6, 0x77, 0xeb, 0x7a, 0x91, 0x31, 0x1c, 0xf2, 0x16, 0x36, 0xca, 0xf2,
	0xfd, 0xff, 0xb3, 0x51, 0xc0, 0x70, 0xd4, 0x0f, 0xb0, 0xf5, 0xcf, 0x88, 0x6b, 0x2b, 0x47, 0xdc,
	0x8c, 0x96, 0x66, 0xfb, 0xa5, 0x00, 0xe0, 0x35, 0x06, 0x99, 0x18, 0x6f, 0x1f, 0x6a, 0x2c, 0xbb,
	0x31, 0x5c, 0xc5, 0xac, 0x62, 0x6c, 0x38, 0xe4, 0x04, 0x88, 0x2c, 0xcd, 0x63, 0x46, 0x39, 0x73,
	0xa4, 0x55, 0xd4, 0x07, 0xad, 0xd2, 0x44, 0xd6, 0xb1, 0x24, 0xa1, 0x65, 0x8e, 0x61, 0x47, 0x76,
	0x62, 0x8b, 0x05, 0x9b, 0x73, 0x37, 0x63, 0x0f, 0x5c, 0x53, 0x0a, 0x0f, 0x4a, 0x34, 0xee, 0x7c,
	0x00, 0x20, 0x9b, 0x08, 0x18, 0xde, 0xb4, 0x6e, 0xd6, 0x31, 0x63, 0xe5, 0x11, 0xeb, 0x7c, 0x57,
	0xa1, 0x89, 0x7b, 0x8d, 0x67, 0x09, 0x8b, 0x33, 0xca, 0xdd, 0x30, 0x20, 0x1a, 0x54, 0xd0, 0x60,
	0x85, 0xc1, 0x5b, 0xda, 0xad, 0x67, 0xa6, 0x21, 0xc7, 0x94, 0x30, 0xf2, 0x11, 0x1e, 0xf1, 0x90,
	0x53, 0xcf, 0x4e, 0xe6, 0x57, 0xcc, 0x49, 0x3d, 0xe6, 0x14, 0xfb, 0xde, 0xf5, 0x63, 0xb7, 0x10,
	0x3a, 0x2d, 0x91, 0xa4, 0x07, 0x20, 0xc9, 0x11, 0x75, 0x9d, 0x7b, 0x0e, 0x52, 0x47, 0xd4, 0x84,
	0xba, 0x48, 0x91, 0xf7, 0xb3, 0x9d, 0xb4, 0xf4, 0xe9, 0x9d, 0x14, 0x89, 0xea, 0xa7, 0x8c, 0xe8,
	0xb0, 0x21, 0xdf, 0x50, 0xc2, 0x29, 0x4f, 0x13, 0xf4, 0xe6, 0xd6, 0xe1, 0xb3, 0x55, 0x9b, 0x4d,
	0x11, 0x65, 0x36, 0xbc, 0xeb, 0xe0, 0xd5, 0x0c, 0x1a, 0x37, 0x6a, 0xa4, 0x05, 0x3b, 0xc3, 0x81,
	0x3e, 0x1d, 0xd8, 0x53, 0x4b, 0xb7, 0xce, 0xa6, 0xb6, 0x31, 0x3a, 0xd7, 0x87, 0x46, 0xbf, 0xf9,
	0x1f, 0x79, 0x0a, 0xad, 0xa5, 0xca, 0xf8, 0xcc, 0x9a, 0x5a, 0xfa, 0xa8, 0x6f, 0x8c, 0x3e, 0x35,
	0x15, 0xf2, 0x04, 0xf6, 0x96, 0xaa, 0xd6, 0xc0, 0x3c, 0x35, 0x46, 0xba, 0x35, 0xe8, 0x37, 0xd5,
	0xa3, 0x0b, 0x78, 0x3c, 0x0f, 0xfd, 0xdb, 0x53, 0x1d, 0x49, 0xf3, 0x4d, 0x84, 0x6d, 0x26, 0xca,
	0x17, 0xf9, 0xfe, 0xb3, 0xde, 0x37, 0x75, 0xcd, 0x1a, 0x7e, 0xfe, 0xa1, 0x6e, 0x5b, 0x25, 0x01,
	0x61, 0xda, 0x79, 0xef, 0xe7, 0x75, 0xee, 0x02, 0x73, 0x17, 0xe7, 0xbd, 0xd9, 0x3a, 0xda, 0xee,
	0xcd, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8e, 0x7a, 0xc8, 0x64, 0x56, 0x05, 0x00, 0x00,
}
