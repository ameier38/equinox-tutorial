// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: cosmicdealership/vehicle/v1/vehicle_service.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace CosmicDealership.Vehicle.V1 {

  /// <summary>Holder for reflection information generated from cosmicdealership/vehicle/v1/vehicle_service.proto</summary>
  public static partial class VehicleServiceReflection {

    #region Descriptor
    /// <summary>File descriptor for cosmicdealership/vehicle/v1/vehicle_service.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static VehicleServiceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjFjb3NtaWNkZWFsZXJzaGlwL3ZlaGljbGUvdjEvdmVoaWNsZV9zZXJ2aWNl",
            "LnByb3RvEhtjb3NtaWNkZWFsZXJzaGlwLnZlaGljbGUudjEaKWNvc21pY2Rl",
            "YWxlcnNoaXAvdmVoaWNsZS92MS92ZWhpY2xlLnByb3RvGiNjb3NtaWNkZWFs",
            "ZXJzaGlwL3VzZXIvdjEvdXNlci5wcm90byKMAQoRQWRkVmVoaWNsZVJlcXVl",
            "c3QSLAoEdXNlchgBIAEoCzIeLmNvc21pY2RlYWxlcnNoaXAudXNlci52MS5V",
            "c2VyEhIKCnZlaGljbGVfaWQYAiABKAkSNQoHdmVoaWNsZRgDIAEoCzIkLmNv",
            "c21pY2RlYWxlcnNoaXAudmVoaWNsZS52MS5WZWhpY2xlIo0BChJBZGRWZWhp",
            "Y2xlUmVzcG9uc2USEQoHc3VjY2VzcxgBIAEoCUgAEiAKFnZlaGljbGVfYWxy",
            "ZWFkeV9leGlzdHMYAiABKAlIABIZCg92ZWhpY2xlX2ludmFsaWQYAyABKAlI",
            "ABIbChFwZXJtaXNzaW9uX2RlbmllZBgEIAEoCUgAQgoKCHJlc3BvbnNlIo8B",
            "ChRVcGRhdGVWZWhpY2xlUmVxdWVzdBIsCgR1c2VyGAEgASgLMh4uY29zbWlj",
            "ZGVhbGVyc2hpcC51c2VyLnYxLlVzZXISEgoKdmVoaWNsZV9pZBgCIAEoCRI1",
            "Cgd2ZWhpY2xlGAMgASgLMiQuY29zbWljZGVhbGVyc2hpcC52ZWhpY2xlLnYx",
            "LlZlaGljbGUiiwEKFVVwZGF0ZVZlaGljbGVSZXNwb25zZRIRCgdzdWNjZXNz",
            "GAEgASgJSAASGwoRdmVoaWNsZV9ub3RfZm91bmQYAiABKAlIABIZCg92ZWhp",
            "Y2xlX2ludmFsaWQYAyABKAlIABIbChFwZXJtaXNzaW9uX2RlbmllZBgEIAEo",
            "CUgAQgoKCHJlc3BvbnNlImsKE1VwZGF0ZUF2YXRhclJlcXVlc3QSLAoEdXNl",
            "chgBIAEoCzIeLmNvc21pY2RlYWxlcnNoaXAudXNlci52MS5Vc2VyEhIKCnZl",
            "aGljbGVfaWQYAiABKAkSEgoKYXZhdGFyX3VybBgDIAEoCSKJAQoUVXBkYXRl",
            "QXZhdGFyUmVzcG9uc2USEQoHc3VjY2VzcxgBIAEoCUgAEhsKEXZlaGljbGVf",
            "bm90X2ZvdW5kGAIgASgJSAASGAoOYXZhdGFyX2ludmFsaWQYAyABKAlIABIb",
            "ChFwZXJtaXNzaW9uX2RlbmllZBgEIAEoCUgAQgoKCHJlc3BvbnNlIlcKE1Jl",
            "bW92ZUF2YXRhclJlcXVlc3QSLAoEdXNlchgBIAEoCzIeLmNvc21pY2RlYWxl",
            "cnNoaXAudXNlci52MS5Vc2VyEhIKCnZlaGljbGVfaWQYAiABKAkibwoUUmVt",
            "b3ZlQXZhdGFyUmVzcG9uc2USEQoHc3VjY2VzcxgBIAEoCUgAEhsKEXZlaGlj",
            "bGVfbm90X2ZvdW5kGAIgASgJSAASGwoRcGVybWlzc2lvbl9kZW5pZWQYAyAB",
            "KAlIAEIKCghyZXNwb25zZSJmCg9BZGRJbWFnZVJlcXVlc3QSLAoEdXNlchgB",
            "IAEoCzIeLmNvc21pY2RlYWxlcnNoaXAudXNlci52MS5Vc2VyEhIKCnZlaGlj",
            "bGVfaWQYAiABKAkSEQoJaW1hZ2VfdXJsGAMgASgJIqcBChBBZGRJbWFnZVJl",
            "c3BvbnNlEhEKB3N1Y2Nlc3MYASABKAlIABIbChF2ZWhpY2xlX25vdF9mb3Vu",
            "ZBgCIAEoCUgAEhcKDWltYWdlX2ludmFsaWQYAyABKAlIABIhChdtYXhfaW1h",
            "Z2VfY291bnRfcmVhY2hlZBgEIAEoCUgAEhsKEXBlcm1pc3Npb25fZGVuaWVk",
            "GAUgASgJSABCCgoIcmVzcG9uc2UiaQoSUmVtb3ZlSW1hZ2VSZXF1ZXN0EiwK",
            "BHVzZXIYASABKAsyHi5jb3NtaWNkZWFsZXJzaGlwLnVzZXIudjEuVXNlchIS",
            "Cgp2ZWhpY2xlX2lkGAIgASgJEhEKCWltYWdlX3VybBgDIAEoCSKiAQoTUmVt",
            "b3ZlSW1hZ2VSZXNwb25zZRIRCgdzdWNjZXNzGAEgASgJSAASGwoRdmVoaWNs",
            "ZV9ub3RfZm91bmQYAiABKAlIABIXCg1pbWFnZV9pbnZhbGlkGAMgASgJSAAS",
            "GQoPaW1hZ2Vfbm90X2ZvdW5kGAQgASgJSAASGwoRcGVybWlzc2lvbl9kZW5p",
            "ZWQYBSABKAlIAEIKCghyZXNwb25zZSJYChRSZW1vdmVWZWhpY2xlUmVxdWVz",
            "dBIsCgR1c2VyGAEgASgLMh4uY29zbWljZGVhbGVyc2hpcC51c2VyLnYxLlVz",
            "ZXISEgoKdmVoaWNsZV9pZBgCIAEoCSKUAQoVUmVtb3ZlVmVoaWNsZVJlc3Bv",
            "bnNlEhEKB3N1Y2Nlc3MYASABKAlIABIbChF2ZWhpY2xlX25vdF9mb3VuZBgC",
            "IAEoCUgAEiIKGHZlaGljbGVfY3VycmVudGx5X2xlYXNlZBgDIAEoCUgAEhsK",
            "EXBlcm1pc3Npb25fZGVuaWVkGAQgASgJSABCCgoIcmVzcG9uc2UiVwoTTGVh",
            "c2VWZWhpY2xlUmVxdWVzdBIsCgR1c2VyGAEgASgLMh4uY29zbWljZGVhbGVy",
            "c2hpcC51c2VyLnYxLlVzZXISEgoKdmVoaWNsZV9pZBgCIAEoCSKTAQoUTGVh",
            "c2VWZWhpY2xlUmVzcG9uc2USEQoHc3VjY2VzcxgBIAEoCUgAEhsKEXZlaGlj",
            "bGVfbm90X2ZvdW5kGAIgASgJSAASIgoYdmVoaWNsZV9jdXJyZW50bHlfbGVh",
            "c2VkGAMgASgJSAASGwoRcGVybWlzc2lvbl9kZW5pZWQYBCABKAlIAEIKCghy",
            "ZXNwb25zZSJYChRSZXR1cm5WZWhpY2xlUmVxdWVzdBIsCgR1c2VyGAEgASgL",
            "Mh4uY29zbWljZGVhbGVyc2hpcC51c2VyLnYxLlVzZXISEgoKdmVoaWNsZV9p",
            "ZBgCIAEoCSKUAQoVUmV0dXJuVmVoaWNsZVJlc3BvbnNlEhEKB3N1Y2Nlc3MY",
            "ASABKAlIABIbChF2ZWhpY2xlX25vdF9mb3VuZBgCIAEoCUgAEiIKGHZlaGlj",
            "bGVfYWxyZWFkeV9yZXR1cm5lZBgDIAEoCUgAEhsKEXBlcm1pc3Npb25fZGVu",
            "aWVkGAQgASgJSABCCgoIcmVzcG9uc2UyoQgKDlZlaGljbGVTZXJ2aWNlEm0K",
            "CkFkZFZlaGljbGUSLi5jb3NtaWNkZWFsZXJzaGlwLnZlaGljbGUudjEuQWRk",
            "VmVoaWNsZVJlcXVlc3QaLy5jb3NtaWNkZWFsZXJzaGlwLnZlaGljbGUudjEu",
            "QWRkVmVoaWNsZVJlc3BvbnNlEnYKDVVwZGF0ZVZlaGljbGUSMS5jb3NtaWNk",
            "ZWFsZXJzaGlwLnZlaGljbGUudjEuVXBkYXRlVmVoaWNsZVJlcXVlc3QaMi5j",
            "b3NtaWNkZWFsZXJzaGlwLnZlaGljbGUudjEuVXBkYXRlVmVoaWNsZVJlc3Bv",
            "bnNlEnMKDFVwZGF0ZUF2YXRhchIwLmNvc21pY2RlYWxlcnNoaXAudmVoaWNs",
            "ZS52MS5VcGRhdGVBdmF0YXJSZXF1ZXN0GjEuY29zbWljZGVhbGVyc2hpcC52",
            "ZWhpY2xlLnYxLlVwZGF0ZUF2YXRhclJlc3BvbnNlEnMKDFJlbW92ZUF2YXRh",
            "chIwLmNvc21pY2RlYWxlcnNoaXAudmVoaWNsZS52MS5SZW1vdmVBdmF0YXJS",
            "ZXF1ZXN0GjEuY29zbWljZGVhbGVyc2hpcC52ZWhpY2xlLnYxLlJlbW92ZUF2",
            "YXRhclJlc3BvbnNlEmcKCEFkZEltYWdlEiwuY29zbWljZGVhbGVyc2hpcC52",
            "ZWhpY2xlLnYxLkFkZEltYWdlUmVxdWVzdBotLmNvc21pY2RlYWxlcnNoaXAu",
            "dmVoaWNsZS52MS5BZGRJbWFnZVJlc3BvbnNlEnAKC1JlbW92ZUltYWdlEi8u",
            "Y29zbWljZGVhbGVyc2hpcC52ZWhpY2xlLnYxLlJlbW92ZUltYWdlUmVxdWVz",
            "dBowLmNvc21pY2RlYWxlcnNoaXAudmVoaWNsZS52MS5SZW1vdmVJbWFnZVJl",
            "c3BvbnNlEnYKDVJlbW92ZVZlaGljbGUSMS5jb3NtaWNkZWFsZXJzaGlwLnZl",
            "aGljbGUudjEuUmVtb3ZlVmVoaWNsZVJlcXVlc3QaMi5jb3NtaWNkZWFsZXJz",
            "aGlwLnZlaGljbGUudjEuUmVtb3ZlVmVoaWNsZVJlc3BvbnNlEnMKDExlYXNl",
            "VmVoaWNsZRIwLmNvc21pY2RlYWxlcnNoaXAudmVoaWNsZS52MS5MZWFzZVZl",
            "aGljbGVSZXF1ZXN0GjEuY29zbWljZGVhbGVyc2hpcC52ZWhpY2xlLnYxLkxl",
            "YXNlVmVoaWNsZVJlc3BvbnNlEnYKDVJldHVyblZlaGljbGUSMS5jb3NtaWNk",
            "ZWFsZXJzaGlwLnZlaGljbGUudjEuUmV0dXJuVmVoaWNsZVJlcXVlc3QaMi5j",
            "b3NtaWNkZWFsZXJzaGlwLnZlaGljbGUudjEuUmV0dXJuVmVoaWNsZVJlc3Bv",
            "bnNlQjtaG2Nvc21pY2RlYWxlcnNoaXAvdmVoaWNsZS92MaoCG0Nvc21pY0Rl",
            "YWxlcnNoaXAuVmVoaWNsZS5WMWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::CosmicDealership.Vehicle.V1.VehicleReflection.Descriptor, global::CosmicDealership.User.V1.UserReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::CosmicDealership.Vehicle.V1.AddVehicleRequest), global::CosmicDealership.Vehicle.V1.AddVehicleRequest.Parser, new[]{ "User", "VehicleId", "Vehicle" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CosmicDealership.Vehicle.V1.AddVehicleResponse), global::CosmicDealership.Vehicle.V1.AddVehicleResponse.Parser, new[]{ "Success", "VehicleAlreadyExists", "VehicleInvalid", "PermissionDenied" }, new[]{ "Response" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CosmicDealership.Vehicle.V1.UpdateVehicleRequest), global::CosmicDealership.Vehicle.V1.UpdateVehicleRequest.Parser, new[]{ "User", "VehicleId", "Vehicle" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CosmicDealership.Vehicle.V1.UpdateVehicleResponse), global::CosmicDealership.Vehicle.V1.UpdateVehicleResponse.Parser, new[]{ "Success", "VehicleNotFound", "VehicleInvalid", "PermissionDenied" }, new[]{ "Response" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CosmicDealership.Vehicle.V1.UpdateAvatarRequest), global::CosmicDealership.Vehicle.V1.UpdateAvatarRequest.Parser, new[]{ "User", "VehicleId", "AvatarUrl" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CosmicDealership.Vehicle.V1.UpdateAvatarResponse), global::CosmicDealership.Vehicle.V1.UpdateAvatarResponse.Parser, new[]{ "Success", "VehicleNotFound", "AvatarInvalid", "PermissionDenied" }, new[]{ "Response" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CosmicDealership.Vehicle.V1.RemoveAvatarRequest), global::CosmicDealership.Vehicle.V1.RemoveAvatarRequest.Parser, new[]{ "User", "VehicleId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CosmicDealership.Vehicle.V1.RemoveAvatarResponse), global::CosmicDealership.Vehicle.V1.RemoveAvatarResponse.Parser, new[]{ "Success", "VehicleNotFound", "PermissionDenied" }, new[]{ "Response" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CosmicDealership.Vehicle.V1.AddImageRequest), global::CosmicDealership.Vehicle.V1.AddImageRequest.Parser, new[]{ "User", "VehicleId", "ImageUrl" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CosmicDealership.Vehicle.V1.AddImageResponse), global::CosmicDealership.Vehicle.V1.AddImageResponse.Parser, new[]{ "Success", "VehicleNotFound", "ImageInvalid", "MaxImageCountReached", "PermissionDenied" }, new[]{ "Response" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CosmicDealership.Vehicle.V1.RemoveImageRequest), global::CosmicDealership.Vehicle.V1.RemoveImageRequest.Parser, new[]{ "User", "VehicleId", "ImageUrl" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CosmicDealership.Vehicle.V1.RemoveImageResponse), global::CosmicDealership.Vehicle.V1.RemoveImageResponse.Parser, new[]{ "Success", "VehicleNotFound", "ImageInvalid", "ImageNotFound", "PermissionDenied" }, new[]{ "Response" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CosmicDealership.Vehicle.V1.RemoveVehicleRequest), global::CosmicDealership.Vehicle.V1.RemoveVehicleRequest.Parser, new[]{ "User", "VehicleId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CosmicDealership.Vehicle.V1.RemoveVehicleResponse), global::CosmicDealership.Vehicle.V1.RemoveVehicleResponse.Parser, new[]{ "Success", "VehicleNotFound", "VehicleCurrentlyLeased", "PermissionDenied" }, new[]{ "Response" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CosmicDealership.Vehicle.V1.LeaseVehicleRequest), global::CosmicDealership.Vehicle.V1.LeaseVehicleRequest.Parser, new[]{ "User", "VehicleId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CosmicDealership.Vehicle.V1.LeaseVehicleResponse), global::CosmicDealership.Vehicle.V1.LeaseVehicleResponse.Parser, new[]{ "Success", "VehicleNotFound", "VehicleCurrentlyLeased", "PermissionDenied" }, new[]{ "Response" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CosmicDealership.Vehicle.V1.ReturnVehicleRequest), global::CosmicDealership.Vehicle.V1.ReturnVehicleRequest.Parser, new[]{ "User", "VehicleId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CosmicDealership.Vehicle.V1.ReturnVehicleResponse), global::CosmicDealership.Vehicle.V1.ReturnVehicleResponse.Parser, new[]{ "Success", "VehicleNotFound", "VehicleAlreadyReturned", "PermissionDenied" }, new[]{ "Response" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class AddVehicleRequest : pb::IMessage<AddVehicleRequest> {
    private static readonly pb::MessageParser<AddVehicleRequest> _parser = new pb::MessageParser<AddVehicleRequest>(() => new AddVehicleRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddVehicleRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CosmicDealership.Vehicle.V1.VehicleServiceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddVehicleRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddVehicleRequest(AddVehicleRequest other) : this() {
      user_ = other.user_ != null ? other.user_.Clone() : null;
      vehicleId_ = other.vehicleId_;
      vehicle_ = other.vehicle_ != null ? other.vehicle_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddVehicleRequest Clone() {
      return new AddVehicleRequest(this);
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 1;
    private global::CosmicDealership.User.V1.User user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CosmicDealership.User.V1.User User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "vehicle_id" field.</summary>
    public const int VehicleIdFieldNumber = 2;
    private string vehicleId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VehicleId {
      get { return vehicleId_; }
      set {
        vehicleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "vehicle" field.</summary>
    public const int VehicleFieldNumber = 3;
    private global::CosmicDealership.Vehicle.V1.Vehicle vehicle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CosmicDealership.Vehicle.V1.Vehicle Vehicle {
      get { return vehicle_; }
      set {
        vehicle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddVehicleRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddVehicleRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(User, other.User)) return false;
      if (VehicleId != other.VehicleId) return false;
      if (!object.Equals(Vehicle, other.Vehicle)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (user_ != null) hash ^= User.GetHashCode();
      if (VehicleId.Length != 0) hash ^= VehicleId.GetHashCode();
      if (vehicle_ != null) hash ^= Vehicle.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (user_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(User);
      }
      if (VehicleId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(VehicleId);
      }
      if (vehicle_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Vehicle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (VehicleId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VehicleId);
      }
      if (vehicle_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Vehicle);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddVehicleRequest other) {
      if (other == null) {
        return;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          User = new global::CosmicDealership.User.V1.User();
        }
        User.MergeFrom(other.User);
      }
      if (other.VehicleId.Length != 0) {
        VehicleId = other.VehicleId;
      }
      if (other.vehicle_ != null) {
        if (vehicle_ == null) {
          Vehicle = new global::CosmicDealership.Vehicle.V1.Vehicle();
        }
        Vehicle.MergeFrom(other.Vehicle);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (user_ == null) {
              User = new global::CosmicDealership.User.V1.User();
            }
            input.ReadMessage(User);
            break;
          }
          case 18: {
            VehicleId = input.ReadString();
            break;
          }
          case 26: {
            if (vehicle_ == null) {
              Vehicle = new global::CosmicDealership.Vehicle.V1.Vehicle();
            }
            input.ReadMessage(Vehicle);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AddVehicleResponse : pb::IMessage<AddVehicleResponse> {
    private static readonly pb::MessageParser<AddVehicleResponse> _parser = new pb::MessageParser<AddVehicleResponse>(() => new AddVehicleResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddVehicleResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CosmicDealership.Vehicle.V1.VehicleServiceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddVehicleResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddVehicleResponse(AddVehicleResponse other) : this() {
      switch (other.ResponseCase) {
        case ResponseOneofCase.Success:
          Success = other.Success;
          break;
        case ResponseOneofCase.VehicleAlreadyExists:
          VehicleAlreadyExists = other.VehicleAlreadyExists;
          break;
        case ResponseOneofCase.VehicleInvalid:
          VehicleInvalid = other.VehicleInvalid;
          break;
        case ResponseOneofCase.PermissionDenied:
          PermissionDenied = other.PermissionDenied;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddVehicleResponse Clone() {
      return new AddVehicleResponse(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Success {
      get { return responseCase_ == ResponseOneofCase.Success ? (string) response_ : ""; }
      set {
        response_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        responseCase_ = ResponseOneofCase.Success;
      }
    }

    /// <summary>Field number for the "vehicle_already_exists" field.</summary>
    public const int VehicleAlreadyExistsFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VehicleAlreadyExists {
      get { return responseCase_ == ResponseOneofCase.VehicleAlreadyExists ? (string) response_ : ""; }
      set {
        response_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        responseCase_ = ResponseOneofCase.VehicleAlreadyExists;
      }
    }

    /// <summary>Field number for the "vehicle_invalid" field.</summary>
    public const int VehicleInvalidFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VehicleInvalid {
      get { return responseCase_ == ResponseOneofCase.VehicleInvalid ? (string) response_ : ""; }
      set {
        response_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        responseCase_ = ResponseOneofCase.VehicleInvalid;
      }
    }

    /// <summary>Field number for the "permission_denied" field.</summary>
    public const int PermissionDeniedFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PermissionDenied {
      get { return responseCase_ == ResponseOneofCase.PermissionDenied ? (string) response_ : ""; }
      set {
        response_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        responseCase_ = ResponseOneofCase.PermissionDenied;
      }
    }

    private object response_;
    /// <summary>Enum of possible cases for the "response" oneof.</summary>
    public enum ResponseOneofCase {
      None = 0,
      Success = 1,
      VehicleAlreadyExists = 2,
      VehicleInvalid = 3,
      PermissionDenied = 4,
    }
    private ResponseOneofCase responseCase_ = ResponseOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseOneofCase ResponseCase {
      get { return responseCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResponse() {
      responseCase_ = ResponseOneofCase.None;
      response_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddVehicleResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddVehicleResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (VehicleAlreadyExists != other.VehicleAlreadyExists) return false;
      if (VehicleInvalid != other.VehicleInvalid) return false;
      if (PermissionDenied != other.PermissionDenied) return false;
      if (ResponseCase != other.ResponseCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (responseCase_ == ResponseOneofCase.Success) hash ^= Success.GetHashCode();
      if (responseCase_ == ResponseOneofCase.VehicleAlreadyExists) hash ^= VehicleAlreadyExists.GetHashCode();
      if (responseCase_ == ResponseOneofCase.VehicleInvalid) hash ^= VehicleInvalid.GetHashCode();
      if (responseCase_ == ResponseOneofCase.PermissionDenied) hash ^= PermissionDenied.GetHashCode();
      hash ^= (int) responseCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (responseCase_ == ResponseOneofCase.Success) {
        output.WriteRawTag(10);
        output.WriteString(Success);
      }
      if (responseCase_ == ResponseOneofCase.VehicleAlreadyExists) {
        output.WriteRawTag(18);
        output.WriteString(VehicleAlreadyExists);
      }
      if (responseCase_ == ResponseOneofCase.VehicleInvalid) {
        output.WriteRawTag(26);
        output.WriteString(VehicleInvalid);
      }
      if (responseCase_ == ResponseOneofCase.PermissionDenied) {
        output.WriteRawTag(34);
        output.WriteString(PermissionDenied);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (responseCase_ == ResponseOneofCase.Success) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Success);
      }
      if (responseCase_ == ResponseOneofCase.VehicleAlreadyExists) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VehicleAlreadyExists);
      }
      if (responseCase_ == ResponseOneofCase.VehicleInvalid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VehicleInvalid);
      }
      if (responseCase_ == ResponseOneofCase.PermissionDenied) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PermissionDenied);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddVehicleResponse other) {
      if (other == null) {
        return;
      }
      switch (other.ResponseCase) {
        case ResponseOneofCase.Success:
          Success = other.Success;
          break;
        case ResponseOneofCase.VehicleAlreadyExists:
          VehicleAlreadyExists = other.VehicleAlreadyExists;
          break;
        case ResponseOneofCase.VehicleInvalid:
          VehicleInvalid = other.VehicleInvalid;
          break;
        case ResponseOneofCase.PermissionDenied:
          PermissionDenied = other.PermissionDenied;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Success = input.ReadString();
            break;
          }
          case 18: {
            VehicleAlreadyExists = input.ReadString();
            break;
          }
          case 26: {
            VehicleInvalid = input.ReadString();
            break;
          }
          case 34: {
            PermissionDenied = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateVehicleRequest : pb::IMessage<UpdateVehicleRequest> {
    private static readonly pb::MessageParser<UpdateVehicleRequest> _parser = new pb::MessageParser<UpdateVehicleRequest>(() => new UpdateVehicleRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateVehicleRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CosmicDealership.Vehicle.V1.VehicleServiceReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateVehicleRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateVehicleRequest(UpdateVehicleRequest other) : this() {
      user_ = other.user_ != null ? other.user_.Clone() : null;
      vehicleId_ = other.vehicleId_;
      vehicle_ = other.vehicle_ != null ? other.vehicle_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateVehicleRequest Clone() {
      return new UpdateVehicleRequest(this);
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 1;
    private global::CosmicDealership.User.V1.User user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CosmicDealership.User.V1.User User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "vehicle_id" field.</summary>
    public const int VehicleIdFieldNumber = 2;
    private string vehicleId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VehicleId {
      get { return vehicleId_; }
      set {
        vehicleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "vehicle" field.</summary>
    public const int VehicleFieldNumber = 3;
    private global::CosmicDealership.Vehicle.V1.Vehicle vehicle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CosmicDealership.Vehicle.V1.Vehicle Vehicle {
      get { return vehicle_; }
      set {
        vehicle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateVehicleRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateVehicleRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(User, other.User)) return false;
      if (VehicleId != other.VehicleId) return false;
      if (!object.Equals(Vehicle, other.Vehicle)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (user_ != null) hash ^= User.GetHashCode();
      if (VehicleId.Length != 0) hash ^= VehicleId.GetHashCode();
      if (vehicle_ != null) hash ^= Vehicle.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (user_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(User);
      }
      if (VehicleId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(VehicleId);
      }
      if (vehicle_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Vehicle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (VehicleId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VehicleId);
      }
      if (vehicle_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Vehicle);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateVehicleRequest other) {
      if (other == null) {
        return;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          User = new global::CosmicDealership.User.V1.User();
        }
        User.MergeFrom(other.User);
      }
      if (other.VehicleId.Length != 0) {
        VehicleId = other.VehicleId;
      }
      if (other.vehicle_ != null) {
        if (vehicle_ == null) {
          Vehicle = new global::CosmicDealership.Vehicle.V1.Vehicle();
        }
        Vehicle.MergeFrom(other.Vehicle);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (user_ == null) {
              User = new global::CosmicDealership.User.V1.User();
            }
            input.ReadMessage(User);
            break;
          }
          case 18: {
            VehicleId = input.ReadString();
            break;
          }
          case 26: {
            if (vehicle_ == null) {
              Vehicle = new global::CosmicDealership.Vehicle.V1.Vehicle();
            }
            input.ReadMessage(Vehicle);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateVehicleResponse : pb::IMessage<UpdateVehicleResponse> {
    private static readonly pb::MessageParser<UpdateVehicleResponse> _parser = new pb::MessageParser<UpdateVehicleResponse>(() => new UpdateVehicleResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateVehicleResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CosmicDealership.Vehicle.V1.VehicleServiceReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateVehicleResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateVehicleResponse(UpdateVehicleResponse other) : this() {
      switch (other.ResponseCase) {
        case ResponseOneofCase.Success:
          Success = other.Success;
          break;
        case ResponseOneofCase.VehicleNotFound:
          VehicleNotFound = other.VehicleNotFound;
          break;
        case ResponseOneofCase.VehicleInvalid:
          VehicleInvalid = other.VehicleInvalid;
          break;
        case ResponseOneofCase.PermissionDenied:
          PermissionDenied = other.PermissionDenied;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateVehicleResponse Clone() {
      return new UpdateVehicleResponse(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Success {
      get { return responseCase_ == ResponseOneofCase.Success ? (string) response_ : ""; }
      set {
        response_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        responseCase_ = ResponseOneofCase.Success;
      }
    }

    /// <summary>Field number for the "vehicle_not_found" field.</summary>
    public const int VehicleNotFoundFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VehicleNotFound {
      get { return responseCase_ == ResponseOneofCase.VehicleNotFound ? (string) response_ : ""; }
      set {
        response_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        responseCase_ = ResponseOneofCase.VehicleNotFound;
      }
    }

    /// <summary>Field number for the "vehicle_invalid" field.</summary>
    public const int VehicleInvalidFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VehicleInvalid {
      get { return responseCase_ == ResponseOneofCase.VehicleInvalid ? (string) response_ : ""; }
      set {
        response_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        responseCase_ = ResponseOneofCase.VehicleInvalid;
      }
    }

    /// <summary>Field number for the "permission_denied" field.</summary>
    public const int PermissionDeniedFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PermissionDenied {
      get { return responseCase_ == ResponseOneofCase.PermissionDenied ? (string) response_ : ""; }
      set {
        response_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        responseCase_ = ResponseOneofCase.PermissionDenied;
      }
    }

    private object response_;
    /// <summary>Enum of possible cases for the "response" oneof.</summary>
    public enum ResponseOneofCase {
      None = 0,
      Success = 1,
      VehicleNotFound = 2,
      VehicleInvalid = 3,
      PermissionDenied = 4,
    }
    private ResponseOneofCase responseCase_ = ResponseOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseOneofCase ResponseCase {
      get { return responseCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResponse() {
      responseCase_ = ResponseOneofCase.None;
      response_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateVehicleResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateVehicleResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (VehicleNotFound != other.VehicleNotFound) return false;
      if (VehicleInvalid != other.VehicleInvalid) return false;
      if (PermissionDenied != other.PermissionDenied) return false;
      if (ResponseCase != other.ResponseCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (responseCase_ == ResponseOneofCase.Success) hash ^= Success.GetHashCode();
      if (responseCase_ == ResponseOneofCase.VehicleNotFound) hash ^= VehicleNotFound.GetHashCode();
      if (responseCase_ == ResponseOneofCase.VehicleInvalid) hash ^= VehicleInvalid.GetHashCode();
      if (responseCase_ == ResponseOneofCase.PermissionDenied) hash ^= PermissionDenied.GetHashCode();
      hash ^= (int) responseCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (responseCase_ == ResponseOneofCase.Success) {
        output.WriteRawTag(10);
        output.WriteString(Success);
      }
      if (responseCase_ == ResponseOneofCase.VehicleNotFound) {
        output.WriteRawTag(18);
        output.WriteString(VehicleNotFound);
      }
      if (responseCase_ == ResponseOneofCase.VehicleInvalid) {
        output.WriteRawTag(26);
        output.WriteString(VehicleInvalid);
      }
      if (responseCase_ == ResponseOneofCase.PermissionDenied) {
        output.WriteRawTag(34);
        output.WriteString(PermissionDenied);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (responseCase_ == ResponseOneofCase.Success) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Success);
      }
      if (responseCase_ == ResponseOneofCase.VehicleNotFound) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VehicleNotFound);
      }
      if (responseCase_ == ResponseOneofCase.VehicleInvalid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VehicleInvalid);
      }
      if (responseCase_ == ResponseOneofCase.PermissionDenied) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PermissionDenied);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateVehicleResponse other) {
      if (other == null) {
        return;
      }
      switch (other.ResponseCase) {
        case ResponseOneofCase.Success:
          Success = other.Success;
          break;
        case ResponseOneofCase.VehicleNotFound:
          VehicleNotFound = other.VehicleNotFound;
          break;
        case ResponseOneofCase.VehicleInvalid:
          VehicleInvalid = other.VehicleInvalid;
          break;
        case ResponseOneofCase.PermissionDenied:
          PermissionDenied = other.PermissionDenied;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Success = input.ReadString();
            break;
          }
          case 18: {
            VehicleNotFound = input.ReadString();
            break;
          }
          case 26: {
            VehicleInvalid = input.ReadString();
            break;
          }
          case 34: {
            PermissionDenied = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateAvatarRequest : pb::IMessage<UpdateAvatarRequest> {
    private static readonly pb::MessageParser<UpdateAvatarRequest> _parser = new pb::MessageParser<UpdateAvatarRequest>(() => new UpdateAvatarRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateAvatarRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CosmicDealership.Vehicle.V1.VehicleServiceReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateAvatarRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateAvatarRequest(UpdateAvatarRequest other) : this() {
      user_ = other.user_ != null ? other.user_.Clone() : null;
      vehicleId_ = other.vehicleId_;
      avatarUrl_ = other.avatarUrl_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateAvatarRequest Clone() {
      return new UpdateAvatarRequest(this);
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 1;
    private global::CosmicDealership.User.V1.User user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CosmicDealership.User.V1.User User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "vehicle_id" field.</summary>
    public const int VehicleIdFieldNumber = 2;
    private string vehicleId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VehicleId {
      get { return vehicleId_; }
      set {
        vehicleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avatar_url" field.</summary>
    public const int AvatarUrlFieldNumber = 3;
    private string avatarUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AvatarUrl {
      get { return avatarUrl_; }
      set {
        avatarUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateAvatarRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateAvatarRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(User, other.User)) return false;
      if (VehicleId != other.VehicleId) return false;
      if (AvatarUrl != other.AvatarUrl) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (user_ != null) hash ^= User.GetHashCode();
      if (VehicleId.Length != 0) hash ^= VehicleId.GetHashCode();
      if (AvatarUrl.Length != 0) hash ^= AvatarUrl.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (user_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(User);
      }
      if (VehicleId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(VehicleId);
      }
      if (AvatarUrl.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AvatarUrl);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (VehicleId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VehicleId);
      }
      if (AvatarUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AvatarUrl);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateAvatarRequest other) {
      if (other == null) {
        return;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          User = new global::CosmicDealership.User.V1.User();
        }
        User.MergeFrom(other.User);
      }
      if (other.VehicleId.Length != 0) {
        VehicleId = other.VehicleId;
      }
      if (other.AvatarUrl.Length != 0) {
        AvatarUrl = other.AvatarUrl;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (user_ == null) {
              User = new global::CosmicDealership.User.V1.User();
            }
            input.ReadMessage(User);
            break;
          }
          case 18: {
            VehicleId = input.ReadString();
            break;
          }
          case 26: {
            AvatarUrl = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateAvatarResponse : pb::IMessage<UpdateAvatarResponse> {
    private static readonly pb::MessageParser<UpdateAvatarResponse> _parser = new pb::MessageParser<UpdateAvatarResponse>(() => new UpdateAvatarResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateAvatarResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CosmicDealership.Vehicle.V1.VehicleServiceReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateAvatarResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateAvatarResponse(UpdateAvatarResponse other) : this() {
      switch (other.ResponseCase) {
        case ResponseOneofCase.Success:
          Success = other.Success;
          break;
        case ResponseOneofCase.VehicleNotFound:
          VehicleNotFound = other.VehicleNotFound;
          break;
        case ResponseOneofCase.AvatarInvalid:
          AvatarInvalid = other.AvatarInvalid;
          break;
        case ResponseOneofCase.PermissionDenied:
          PermissionDenied = other.PermissionDenied;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateAvatarResponse Clone() {
      return new UpdateAvatarResponse(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Success {
      get { return responseCase_ == ResponseOneofCase.Success ? (string) response_ : ""; }
      set {
        response_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        responseCase_ = ResponseOneofCase.Success;
      }
    }

    /// <summary>Field number for the "vehicle_not_found" field.</summary>
    public const int VehicleNotFoundFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VehicleNotFound {
      get { return responseCase_ == ResponseOneofCase.VehicleNotFound ? (string) response_ : ""; }
      set {
        response_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        responseCase_ = ResponseOneofCase.VehicleNotFound;
      }
    }

    /// <summary>Field number for the "avatar_invalid" field.</summary>
    public const int AvatarInvalidFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AvatarInvalid {
      get { return responseCase_ == ResponseOneofCase.AvatarInvalid ? (string) response_ : ""; }
      set {
        response_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        responseCase_ = ResponseOneofCase.AvatarInvalid;
      }
    }

    /// <summary>Field number for the "permission_denied" field.</summary>
    public const int PermissionDeniedFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PermissionDenied {
      get { return responseCase_ == ResponseOneofCase.PermissionDenied ? (string) response_ : ""; }
      set {
        response_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        responseCase_ = ResponseOneofCase.PermissionDenied;
      }
    }

    private object response_;
    /// <summary>Enum of possible cases for the "response" oneof.</summary>
    public enum ResponseOneofCase {
      None = 0,
      Success = 1,
      VehicleNotFound = 2,
      AvatarInvalid = 3,
      PermissionDenied = 4,
    }
    private ResponseOneofCase responseCase_ = ResponseOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseOneofCase ResponseCase {
      get { return responseCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResponse() {
      responseCase_ = ResponseOneofCase.None;
      response_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateAvatarResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateAvatarResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (VehicleNotFound != other.VehicleNotFound) return false;
      if (AvatarInvalid != other.AvatarInvalid) return false;
      if (PermissionDenied != other.PermissionDenied) return false;
      if (ResponseCase != other.ResponseCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (responseCase_ == ResponseOneofCase.Success) hash ^= Success.GetHashCode();
      if (responseCase_ == ResponseOneofCase.VehicleNotFound) hash ^= VehicleNotFound.GetHashCode();
      if (responseCase_ == ResponseOneofCase.AvatarInvalid) hash ^= AvatarInvalid.GetHashCode();
      if (responseCase_ == ResponseOneofCase.PermissionDenied) hash ^= PermissionDenied.GetHashCode();
      hash ^= (int) responseCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (responseCase_ == ResponseOneofCase.Success) {
        output.WriteRawTag(10);
        output.WriteString(Success);
      }
      if (responseCase_ == ResponseOneofCase.VehicleNotFound) {
        output.WriteRawTag(18);
        output.WriteString(VehicleNotFound);
      }
      if (responseCase_ == ResponseOneofCase.AvatarInvalid) {
        output.WriteRawTag(26);
        output.WriteString(AvatarInvalid);
      }
      if (responseCase_ == ResponseOneofCase.PermissionDenied) {
        output.WriteRawTag(34);
        output.WriteString(PermissionDenied);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (responseCase_ == ResponseOneofCase.Success) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Success);
      }
      if (responseCase_ == ResponseOneofCase.VehicleNotFound) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VehicleNotFound);
      }
      if (responseCase_ == ResponseOneofCase.AvatarInvalid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AvatarInvalid);
      }
      if (responseCase_ == ResponseOneofCase.PermissionDenied) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PermissionDenied);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateAvatarResponse other) {
      if (other == null) {
        return;
      }
      switch (other.ResponseCase) {
        case ResponseOneofCase.Success:
          Success = other.Success;
          break;
        case ResponseOneofCase.VehicleNotFound:
          VehicleNotFound = other.VehicleNotFound;
          break;
        case ResponseOneofCase.AvatarInvalid:
          AvatarInvalid = other.AvatarInvalid;
          break;
        case ResponseOneofCase.PermissionDenied:
          PermissionDenied = other.PermissionDenied;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Success = input.ReadString();
            break;
          }
          case 18: {
            VehicleNotFound = input.ReadString();
            break;
          }
          case 26: {
            AvatarInvalid = input.ReadString();
            break;
          }
          case 34: {
            PermissionDenied = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RemoveAvatarRequest : pb::IMessage<RemoveAvatarRequest> {
    private static readonly pb::MessageParser<RemoveAvatarRequest> _parser = new pb::MessageParser<RemoveAvatarRequest>(() => new RemoveAvatarRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoveAvatarRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CosmicDealership.Vehicle.V1.VehicleServiceReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveAvatarRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveAvatarRequest(RemoveAvatarRequest other) : this() {
      user_ = other.user_ != null ? other.user_.Clone() : null;
      vehicleId_ = other.vehicleId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveAvatarRequest Clone() {
      return new RemoveAvatarRequest(this);
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 1;
    private global::CosmicDealership.User.V1.User user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CosmicDealership.User.V1.User User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "vehicle_id" field.</summary>
    public const int VehicleIdFieldNumber = 2;
    private string vehicleId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VehicleId {
      get { return vehicleId_; }
      set {
        vehicleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoveAvatarRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoveAvatarRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(User, other.User)) return false;
      if (VehicleId != other.VehicleId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (user_ != null) hash ^= User.GetHashCode();
      if (VehicleId.Length != 0) hash ^= VehicleId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (user_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(User);
      }
      if (VehicleId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(VehicleId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (VehicleId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VehicleId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoveAvatarRequest other) {
      if (other == null) {
        return;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          User = new global::CosmicDealership.User.V1.User();
        }
        User.MergeFrom(other.User);
      }
      if (other.VehicleId.Length != 0) {
        VehicleId = other.VehicleId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (user_ == null) {
              User = new global::CosmicDealership.User.V1.User();
            }
            input.ReadMessage(User);
            break;
          }
          case 18: {
            VehicleId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RemoveAvatarResponse : pb::IMessage<RemoveAvatarResponse> {
    private static readonly pb::MessageParser<RemoveAvatarResponse> _parser = new pb::MessageParser<RemoveAvatarResponse>(() => new RemoveAvatarResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoveAvatarResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CosmicDealership.Vehicle.V1.VehicleServiceReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveAvatarResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveAvatarResponse(RemoveAvatarResponse other) : this() {
      switch (other.ResponseCase) {
        case ResponseOneofCase.Success:
          Success = other.Success;
          break;
        case ResponseOneofCase.VehicleNotFound:
          VehicleNotFound = other.VehicleNotFound;
          break;
        case ResponseOneofCase.PermissionDenied:
          PermissionDenied = other.PermissionDenied;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveAvatarResponse Clone() {
      return new RemoveAvatarResponse(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Success {
      get { return responseCase_ == ResponseOneofCase.Success ? (string) response_ : ""; }
      set {
        response_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        responseCase_ = ResponseOneofCase.Success;
      }
    }

    /// <summary>Field number for the "vehicle_not_found" field.</summary>
    public const int VehicleNotFoundFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VehicleNotFound {
      get { return responseCase_ == ResponseOneofCase.VehicleNotFound ? (string) response_ : ""; }
      set {
        response_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        responseCase_ = ResponseOneofCase.VehicleNotFound;
      }
    }

    /// <summary>Field number for the "permission_denied" field.</summary>
    public const int PermissionDeniedFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PermissionDenied {
      get { return responseCase_ == ResponseOneofCase.PermissionDenied ? (string) response_ : ""; }
      set {
        response_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        responseCase_ = ResponseOneofCase.PermissionDenied;
      }
    }

    private object response_;
    /// <summary>Enum of possible cases for the "response" oneof.</summary>
    public enum ResponseOneofCase {
      None = 0,
      Success = 1,
      VehicleNotFound = 2,
      PermissionDenied = 3,
    }
    private ResponseOneofCase responseCase_ = ResponseOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseOneofCase ResponseCase {
      get { return responseCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResponse() {
      responseCase_ = ResponseOneofCase.None;
      response_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoveAvatarResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoveAvatarResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (VehicleNotFound != other.VehicleNotFound) return false;
      if (PermissionDenied != other.PermissionDenied) return false;
      if (ResponseCase != other.ResponseCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (responseCase_ == ResponseOneofCase.Success) hash ^= Success.GetHashCode();
      if (responseCase_ == ResponseOneofCase.VehicleNotFound) hash ^= VehicleNotFound.GetHashCode();
      if (responseCase_ == ResponseOneofCase.PermissionDenied) hash ^= PermissionDenied.GetHashCode();
      hash ^= (int) responseCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (responseCase_ == ResponseOneofCase.Success) {
        output.WriteRawTag(10);
        output.WriteString(Success);
      }
      if (responseCase_ == ResponseOneofCase.VehicleNotFound) {
        output.WriteRawTag(18);
        output.WriteString(VehicleNotFound);
      }
      if (responseCase_ == ResponseOneofCase.PermissionDenied) {
        output.WriteRawTag(26);
        output.WriteString(PermissionDenied);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (responseCase_ == ResponseOneofCase.Success) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Success);
      }
      if (responseCase_ == ResponseOneofCase.VehicleNotFound) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VehicleNotFound);
      }
      if (responseCase_ == ResponseOneofCase.PermissionDenied) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PermissionDenied);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoveAvatarResponse other) {
      if (other == null) {
        return;
      }
      switch (other.ResponseCase) {
        case ResponseOneofCase.Success:
          Success = other.Success;
          break;
        case ResponseOneofCase.VehicleNotFound:
          VehicleNotFound = other.VehicleNotFound;
          break;
        case ResponseOneofCase.PermissionDenied:
          PermissionDenied = other.PermissionDenied;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Success = input.ReadString();
            break;
          }
          case 18: {
            VehicleNotFound = input.ReadString();
            break;
          }
          case 26: {
            PermissionDenied = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AddImageRequest : pb::IMessage<AddImageRequest> {
    private static readonly pb::MessageParser<AddImageRequest> _parser = new pb::MessageParser<AddImageRequest>(() => new AddImageRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddImageRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CosmicDealership.Vehicle.V1.VehicleServiceReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddImageRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddImageRequest(AddImageRequest other) : this() {
      user_ = other.user_ != null ? other.user_.Clone() : null;
      vehicleId_ = other.vehicleId_;
      imageUrl_ = other.imageUrl_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddImageRequest Clone() {
      return new AddImageRequest(this);
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 1;
    private global::CosmicDealership.User.V1.User user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CosmicDealership.User.V1.User User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "vehicle_id" field.</summary>
    public const int VehicleIdFieldNumber = 2;
    private string vehicleId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VehicleId {
      get { return vehicleId_; }
      set {
        vehicleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "image_url" field.</summary>
    public const int ImageUrlFieldNumber = 3;
    private string imageUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImageUrl {
      get { return imageUrl_; }
      set {
        imageUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddImageRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddImageRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(User, other.User)) return false;
      if (VehicleId != other.VehicleId) return false;
      if (ImageUrl != other.ImageUrl) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (user_ != null) hash ^= User.GetHashCode();
      if (VehicleId.Length != 0) hash ^= VehicleId.GetHashCode();
      if (ImageUrl.Length != 0) hash ^= ImageUrl.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (user_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(User);
      }
      if (VehicleId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(VehicleId);
      }
      if (ImageUrl.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ImageUrl);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (VehicleId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VehicleId);
      }
      if (ImageUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImageUrl);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddImageRequest other) {
      if (other == null) {
        return;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          User = new global::CosmicDealership.User.V1.User();
        }
        User.MergeFrom(other.User);
      }
      if (other.VehicleId.Length != 0) {
        VehicleId = other.VehicleId;
      }
      if (other.ImageUrl.Length != 0) {
        ImageUrl = other.ImageUrl;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (user_ == null) {
              User = new global::CosmicDealership.User.V1.User();
            }
            input.ReadMessage(User);
            break;
          }
          case 18: {
            VehicleId = input.ReadString();
            break;
          }
          case 26: {
            ImageUrl = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AddImageResponse : pb::IMessage<AddImageResponse> {
    private static readonly pb::MessageParser<AddImageResponse> _parser = new pb::MessageParser<AddImageResponse>(() => new AddImageResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddImageResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CosmicDealership.Vehicle.V1.VehicleServiceReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddImageResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddImageResponse(AddImageResponse other) : this() {
      switch (other.ResponseCase) {
        case ResponseOneofCase.Success:
          Success = other.Success;
          break;
        case ResponseOneofCase.VehicleNotFound:
          VehicleNotFound = other.VehicleNotFound;
          break;
        case ResponseOneofCase.ImageInvalid:
          ImageInvalid = other.ImageInvalid;
          break;
        case ResponseOneofCase.MaxImageCountReached:
          MaxImageCountReached = other.MaxImageCountReached;
          break;
        case ResponseOneofCase.PermissionDenied:
          PermissionDenied = other.PermissionDenied;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddImageResponse Clone() {
      return new AddImageResponse(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Success {
      get { return responseCase_ == ResponseOneofCase.Success ? (string) response_ : ""; }
      set {
        response_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        responseCase_ = ResponseOneofCase.Success;
      }
    }

    /// <summary>Field number for the "vehicle_not_found" field.</summary>
    public const int VehicleNotFoundFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VehicleNotFound {
      get { return responseCase_ == ResponseOneofCase.VehicleNotFound ? (string) response_ : ""; }
      set {
        response_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        responseCase_ = ResponseOneofCase.VehicleNotFound;
      }
    }

    /// <summary>Field number for the "image_invalid" field.</summary>
    public const int ImageInvalidFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImageInvalid {
      get { return responseCase_ == ResponseOneofCase.ImageInvalid ? (string) response_ : ""; }
      set {
        response_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        responseCase_ = ResponseOneofCase.ImageInvalid;
      }
    }

    /// <summary>Field number for the "max_image_count_reached" field.</summary>
    public const int MaxImageCountReachedFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MaxImageCountReached {
      get { return responseCase_ == ResponseOneofCase.MaxImageCountReached ? (string) response_ : ""; }
      set {
        response_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        responseCase_ = ResponseOneofCase.MaxImageCountReached;
      }
    }

    /// <summary>Field number for the "permission_denied" field.</summary>
    public const int PermissionDeniedFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PermissionDenied {
      get { return responseCase_ == ResponseOneofCase.PermissionDenied ? (string) response_ : ""; }
      set {
        response_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        responseCase_ = ResponseOneofCase.PermissionDenied;
      }
    }

    private object response_;
    /// <summary>Enum of possible cases for the "response" oneof.</summary>
    public enum ResponseOneofCase {
      None = 0,
      Success = 1,
      VehicleNotFound = 2,
      ImageInvalid = 3,
      MaxImageCountReached = 4,
      PermissionDenied = 5,
    }
    private ResponseOneofCase responseCase_ = ResponseOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseOneofCase ResponseCase {
      get { return responseCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResponse() {
      responseCase_ = ResponseOneofCase.None;
      response_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddImageResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddImageResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (VehicleNotFound != other.VehicleNotFound) return false;
      if (ImageInvalid != other.ImageInvalid) return false;
      if (MaxImageCountReached != other.MaxImageCountReached) return false;
      if (PermissionDenied != other.PermissionDenied) return false;
      if (ResponseCase != other.ResponseCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (responseCase_ == ResponseOneofCase.Success) hash ^= Success.GetHashCode();
      if (responseCase_ == ResponseOneofCase.VehicleNotFound) hash ^= VehicleNotFound.GetHashCode();
      if (responseCase_ == ResponseOneofCase.ImageInvalid) hash ^= ImageInvalid.GetHashCode();
      if (responseCase_ == ResponseOneofCase.MaxImageCountReached) hash ^= MaxImageCountReached.GetHashCode();
      if (responseCase_ == ResponseOneofCase.PermissionDenied) hash ^= PermissionDenied.GetHashCode();
      hash ^= (int) responseCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (responseCase_ == ResponseOneofCase.Success) {
        output.WriteRawTag(10);
        output.WriteString(Success);
      }
      if (responseCase_ == ResponseOneofCase.VehicleNotFound) {
        output.WriteRawTag(18);
        output.WriteString(VehicleNotFound);
      }
      if (responseCase_ == ResponseOneofCase.ImageInvalid) {
        output.WriteRawTag(26);
        output.WriteString(ImageInvalid);
      }
      if (responseCase_ == ResponseOneofCase.MaxImageCountReached) {
        output.WriteRawTag(34);
        output.WriteString(MaxImageCountReached);
      }
      if (responseCase_ == ResponseOneofCase.PermissionDenied) {
        output.WriteRawTag(42);
        output.WriteString(PermissionDenied);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (responseCase_ == ResponseOneofCase.Success) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Success);
      }
      if (responseCase_ == ResponseOneofCase.VehicleNotFound) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VehicleNotFound);
      }
      if (responseCase_ == ResponseOneofCase.ImageInvalid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImageInvalid);
      }
      if (responseCase_ == ResponseOneofCase.MaxImageCountReached) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MaxImageCountReached);
      }
      if (responseCase_ == ResponseOneofCase.PermissionDenied) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PermissionDenied);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddImageResponse other) {
      if (other == null) {
        return;
      }
      switch (other.ResponseCase) {
        case ResponseOneofCase.Success:
          Success = other.Success;
          break;
        case ResponseOneofCase.VehicleNotFound:
          VehicleNotFound = other.VehicleNotFound;
          break;
        case ResponseOneofCase.ImageInvalid:
          ImageInvalid = other.ImageInvalid;
          break;
        case ResponseOneofCase.MaxImageCountReached:
          MaxImageCountReached = other.MaxImageCountReached;
          break;
        case ResponseOneofCase.PermissionDenied:
          PermissionDenied = other.PermissionDenied;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Success = input.ReadString();
            break;
          }
          case 18: {
            VehicleNotFound = input.ReadString();
            break;
          }
          case 26: {
            ImageInvalid = input.ReadString();
            break;
          }
          case 34: {
            MaxImageCountReached = input.ReadString();
            break;
          }
          case 42: {
            PermissionDenied = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RemoveImageRequest : pb::IMessage<RemoveImageRequest> {
    private static readonly pb::MessageParser<RemoveImageRequest> _parser = new pb::MessageParser<RemoveImageRequest>(() => new RemoveImageRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoveImageRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CosmicDealership.Vehicle.V1.VehicleServiceReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveImageRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveImageRequest(RemoveImageRequest other) : this() {
      user_ = other.user_ != null ? other.user_.Clone() : null;
      vehicleId_ = other.vehicleId_;
      imageUrl_ = other.imageUrl_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveImageRequest Clone() {
      return new RemoveImageRequest(this);
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 1;
    private global::CosmicDealership.User.V1.User user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CosmicDealership.User.V1.User User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "vehicle_id" field.</summary>
    public const int VehicleIdFieldNumber = 2;
    private string vehicleId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VehicleId {
      get { return vehicleId_; }
      set {
        vehicleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "image_url" field.</summary>
    public const int ImageUrlFieldNumber = 3;
    private string imageUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImageUrl {
      get { return imageUrl_; }
      set {
        imageUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoveImageRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoveImageRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(User, other.User)) return false;
      if (VehicleId != other.VehicleId) return false;
      if (ImageUrl != other.ImageUrl) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (user_ != null) hash ^= User.GetHashCode();
      if (VehicleId.Length != 0) hash ^= VehicleId.GetHashCode();
      if (ImageUrl.Length != 0) hash ^= ImageUrl.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (user_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(User);
      }
      if (VehicleId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(VehicleId);
      }
      if (ImageUrl.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ImageUrl);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (VehicleId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VehicleId);
      }
      if (ImageUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImageUrl);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoveImageRequest other) {
      if (other == null) {
        return;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          User = new global::CosmicDealership.User.V1.User();
        }
        User.MergeFrom(other.User);
      }
      if (other.VehicleId.Length != 0) {
        VehicleId = other.VehicleId;
      }
      if (other.ImageUrl.Length != 0) {
        ImageUrl = other.ImageUrl;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (user_ == null) {
              User = new global::CosmicDealership.User.V1.User();
            }
            input.ReadMessage(User);
            break;
          }
          case 18: {
            VehicleId = input.ReadString();
            break;
          }
          case 26: {
            ImageUrl = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RemoveImageResponse : pb::IMessage<RemoveImageResponse> {
    private static readonly pb::MessageParser<RemoveImageResponse> _parser = new pb::MessageParser<RemoveImageResponse>(() => new RemoveImageResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoveImageResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CosmicDealership.Vehicle.V1.VehicleServiceReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveImageResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveImageResponse(RemoveImageResponse other) : this() {
      switch (other.ResponseCase) {
        case ResponseOneofCase.Success:
          Success = other.Success;
          break;
        case ResponseOneofCase.VehicleNotFound:
          VehicleNotFound = other.VehicleNotFound;
          break;
        case ResponseOneofCase.ImageInvalid:
          ImageInvalid = other.ImageInvalid;
          break;
        case ResponseOneofCase.ImageNotFound:
          ImageNotFound = other.ImageNotFound;
          break;
        case ResponseOneofCase.PermissionDenied:
          PermissionDenied = other.PermissionDenied;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveImageResponse Clone() {
      return new RemoveImageResponse(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Success {
      get { return responseCase_ == ResponseOneofCase.Success ? (string) response_ : ""; }
      set {
        response_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        responseCase_ = ResponseOneofCase.Success;
      }
    }

    /// <summary>Field number for the "vehicle_not_found" field.</summary>
    public const int VehicleNotFoundFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VehicleNotFound {
      get { return responseCase_ == ResponseOneofCase.VehicleNotFound ? (string) response_ : ""; }
      set {
        response_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        responseCase_ = ResponseOneofCase.VehicleNotFound;
      }
    }

    /// <summary>Field number for the "image_invalid" field.</summary>
    public const int ImageInvalidFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImageInvalid {
      get { return responseCase_ == ResponseOneofCase.ImageInvalid ? (string) response_ : ""; }
      set {
        response_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        responseCase_ = ResponseOneofCase.ImageInvalid;
      }
    }

    /// <summary>Field number for the "image_not_found" field.</summary>
    public const int ImageNotFoundFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImageNotFound {
      get { return responseCase_ == ResponseOneofCase.ImageNotFound ? (string) response_ : ""; }
      set {
        response_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        responseCase_ = ResponseOneofCase.ImageNotFound;
      }
    }

    /// <summary>Field number for the "permission_denied" field.</summary>
    public const int PermissionDeniedFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PermissionDenied {
      get { return responseCase_ == ResponseOneofCase.PermissionDenied ? (string) response_ : ""; }
      set {
        response_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        responseCase_ = ResponseOneofCase.PermissionDenied;
      }
    }

    private object response_;
    /// <summary>Enum of possible cases for the "response" oneof.</summary>
    public enum ResponseOneofCase {
      None = 0,
      Success = 1,
      VehicleNotFound = 2,
      ImageInvalid = 3,
      ImageNotFound = 4,
      PermissionDenied = 5,
    }
    private ResponseOneofCase responseCase_ = ResponseOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseOneofCase ResponseCase {
      get { return responseCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResponse() {
      responseCase_ = ResponseOneofCase.None;
      response_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoveImageResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoveImageResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (VehicleNotFound != other.VehicleNotFound) return false;
      if (ImageInvalid != other.ImageInvalid) return false;
      if (ImageNotFound != other.ImageNotFound) return false;
      if (PermissionDenied != other.PermissionDenied) return false;
      if (ResponseCase != other.ResponseCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (responseCase_ == ResponseOneofCase.Success) hash ^= Success.GetHashCode();
      if (responseCase_ == ResponseOneofCase.VehicleNotFound) hash ^= VehicleNotFound.GetHashCode();
      if (responseCase_ == ResponseOneofCase.ImageInvalid) hash ^= ImageInvalid.GetHashCode();
      if (responseCase_ == ResponseOneofCase.ImageNotFound) hash ^= ImageNotFound.GetHashCode();
      if (responseCase_ == ResponseOneofCase.PermissionDenied) hash ^= PermissionDenied.GetHashCode();
      hash ^= (int) responseCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (responseCase_ == ResponseOneofCase.Success) {
        output.WriteRawTag(10);
        output.WriteString(Success);
      }
      if (responseCase_ == ResponseOneofCase.VehicleNotFound) {
        output.WriteRawTag(18);
        output.WriteString(VehicleNotFound);
      }
      if (responseCase_ == ResponseOneofCase.ImageInvalid) {
        output.WriteRawTag(26);
        output.WriteString(ImageInvalid);
      }
      if (responseCase_ == ResponseOneofCase.ImageNotFound) {
        output.WriteRawTag(34);
        output.WriteString(ImageNotFound);
      }
      if (responseCase_ == ResponseOneofCase.PermissionDenied) {
        output.WriteRawTag(42);
        output.WriteString(PermissionDenied);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (responseCase_ == ResponseOneofCase.Success) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Success);
      }
      if (responseCase_ == ResponseOneofCase.VehicleNotFound) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VehicleNotFound);
      }
      if (responseCase_ == ResponseOneofCase.ImageInvalid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImageInvalid);
      }
      if (responseCase_ == ResponseOneofCase.ImageNotFound) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImageNotFound);
      }
      if (responseCase_ == ResponseOneofCase.PermissionDenied) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PermissionDenied);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoveImageResponse other) {
      if (other == null) {
        return;
      }
      switch (other.ResponseCase) {
        case ResponseOneofCase.Success:
          Success = other.Success;
          break;
        case ResponseOneofCase.VehicleNotFound:
          VehicleNotFound = other.VehicleNotFound;
          break;
        case ResponseOneofCase.ImageInvalid:
          ImageInvalid = other.ImageInvalid;
          break;
        case ResponseOneofCase.ImageNotFound:
          ImageNotFound = other.ImageNotFound;
          break;
        case ResponseOneofCase.PermissionDenied:
          PermissionDenied = other.PermissionDenied;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Success = input.ReadString();
            break;
          }
          case 18: {
            VehicleNotFound = input.ReadString();
            break;
          }
          case 26: {
            ImageInvalid = input.ReadString();
            break;
          }
          case 34: {
            ImageNotFound = input.ReadString();
            break;
          }
          case 42: {
            PermissionDenied = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RemoveVehicleRequest : pb::IMessage<RemoveVehicleRequest> {
    private static readonly pb::MessageParser<RemoveVehicleRequest> _parser = new pb::MessageParser<RemoveVehicleRequest>(() => new RemoveVehicleRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoveVehicleRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CosmicDealership.Vehicle.V1.VehicleServiceReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveVehicleRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveVehicleRequest(RemoveVehicleRequest other) : this() {
      user_ = other.user_ != null ? other.user_.Clone() : null;
      vehicleId_ = other.vehicleId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveVehicleRequest Clone() {
      return new RemoveVehicleRequest(this);
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 1;
    private global::CosmicDealership.User.V1.User user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CosmicDealership.User.V1.User User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "vehicle_id" field.</summary>
    public const int VehicleIdFieldNumber = 2;
    private string vehicleId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VehicleId {
      get { return vehicleId_; }
      set {
        vehicleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoveVehicleRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoveVehicleRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(User, other.User)) return false;
      if (VehicleId != other.VehicleId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (user_ != null) hash ^= User.GetHashCode();
      if (VehicleId.Length != 0) hash ^= VehicleId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (user_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(User);
      }
      if (VehicleId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(VehicleId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (VehicleId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VehicleId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoveVehicleRequest other) {
      if (other == null) {
        return;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          User = new global::CosmicDealership.User.V1.User();
        }
        User.MergeFrom(other.User);
      }
      if (other.VehicleId.Length != 0) {
        VehicleId = other.VehicleId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (user_ == null) {
              User = new global::CosmicDealership.User.V1.User();
            }
            input.ReadMessage(User);
            break;
          }
          case 18: {
            VehicleId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RemoveVehicleResponse : pb::IMessage<RemoveVehicleResponse> {
    private static readonly pb::MessageParser<RemoveVehicleResponse> _parser = new pb::MessageParser<RemoveVehicleResponse>(() => new RemoveVehicleResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoveVehicleResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CosmicDealership.Vehicle.V1.VehicleServiceReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveVehicleResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveVehicleResponse(RemoveVehicleResponse other) : this() {
      switch (other.ResponseCase) {
        case ResponseOneofCase.Success:
          Success = other.Success;
          break;
        case ResponseOneofCase.VehicleNotFound:
          VehicleNotFound = other.VehicleNotFound;
          break;
        case ResponseOneofCase.VehicleCurrentlyLeased:
          VehicleCurrentlyLeased = other.VehicleCurrentlyLeased;
          break;
        case ResponseOneofCase.PermissionDenied:
          PermissionDenied = other.PermissionDenied;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveVehicleResponse Clone() {
      return new RemoveVehicleResponse(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Success {
      get { return responseCase_ == ResponseOneofCase.Success ? (string) response_ : ""; }
      set {
        response_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        responseCase_ = ResponseOneofCase.Success;
      }
    }

    /// <summary>Field number for the "vehicle_not_found" field.</summary>
    public const int VehicleNotFoundFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VehicleNotFound {
      get { return responseCase_ == ResponseOneofCase.VehicleNotFound ? (string) response_ : ""; }
      set {
        response_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        responseCase_ = ResponseOneofCase.VehicleNotFound;
      }
    }

    /// <summary>Field number for the "vehicle_currently_leased" field.</summary>
    public const int VehicleCurrentlyLeasedFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VehicleCurrentlyLeased {
      get { return responseCase_ == ResponseOneofCase.VehicleCurrentlyLeased ? (string) response_ : ""; }
      set {
        response_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        responseCase_ = ResponseOneofCase.VehicleCurrentlyLeased;
      }
    }

    /// <summary>Field number for the "permission_denied" field.</summary>
    public const int PermissionDeniedFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PermissionDenied {
      get { return responseCase_ == ResponseOneofCase.PermissionDenied ? (string) response_ : ""; }
      set {
        response_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        responseCase_ = ResponseOneofCase.PermissionDenied;
      }
    }

    private object response_;
    /// <summary>Enum of possible cases for the "response" oneof.</summary>
    public enum ResponseOneofCase {
      None = 0,
      Success = 1,
      VehicleNotFound = 2,
      VehicleCurrentlyLeased = 3,
      PermissionDenied = 4,
    }
    private ResponseOneofCase responseCase_ = ResponseOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseOneofCase ResponseCase {
      get { return responseCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResponse() {
      responseCase_ = ResponseOneofCase.None;
      response_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoveVehicleResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoveVehicleResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (VehicleNotFound != other.VehicleNotFound) return false;
      if (VehicleCurrentlyLeased != other.VehicleCurrentlyLeased) return false;
      if (PermissionDenied != other.PermissionDenied) return false;
      if (ResponseCase != other.ResponseCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (responseCase_ == ResponseOneofCase.Success) hash ^= Success.GetHashCode();
      if (responseCase_ == ResponseOneofCase.VehicleNotFound) hash ^= VehicleNotFound.GetHashCode();
      if (responseCase_ == ResponseOneofCase.VehicleCurrentlyLeased) hash ^= VehicleCurrentlyLeased.GetHashCode();
      if (responseCase_ == ResponseOneofCase.PermissionDenied) hash ^= PermissionDenied.GetHashCode();
      hash ^= (int) responseCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (responseCase_ == ResponseOneofCase.Success) {
        output.WriteRawTag(10);
        output.WriteString(Success);
      }
      if (responseCase_ == ResponseOneofCase.VehicleNotFound) {
        output.WriteRawTag(18);
        output.WriteString(VehicleNotFound);
      }
      if (responseCase_ == ResponseOneofCase.VehicleCurrentlyLeased) {
        output.WriteRawTag(26);
        output.WriteString(VehicleCurrentlyLeased);
      }
      if (responseCase_ == ResponseOneofCase.PermissionDenied) {
        output.WriteRawTag(34);
        output.WriteString(PermissionDenied);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (responseCase_ == ResponseOneofCase.Success) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Success);
      }
      if (responseCase_ == ResponseOneofCase.VehicleNotFound) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VehicleNotFound);
      }
      if (responseCase_ == ResponseOneofCase.VehicleCurrentlyLeased) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VehicleCurrentlyLeased);
      }
      if (responseCase_ == ResponseOneofCase.PermissionDenied) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PermissionDenied);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoveVehicleResponse other) {
      if (other == null) {
        return;
      }
      switch (other.ResponseCase) {
        case ResponseOneofCase.Success:
          Success = other.Success;
          break;
        case ResponseOneofCase.VehicleNotFound:
          VehicleNotFound = other.VehicleNotFound;
          break;
        case ResponseOneofCase.VehicleCurrentlyLeased:
          VehicleCurrentlyLeased = other.VehicleCurrentlyLeased;
          break;
        case ResponseOneofCase.PermissionDenied:
          PermissionDenied = other.PermissionDenied;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Success = input.ReadString();
            break;
          }
          case 18: {
            VehicleNotFound = input.ReadString();
            break;
          }
          case 26: {
            VehicleCurrentlyLeased = input.ReadString();
            break;
          }
          case 34: {
            PermissionDenied = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LeaseVehicleRequest : pb::IMessage<LeaseVehicleRequest> {
    private static readonly pb::MessageParser<LeaseVehicleRequest> _parser = new pb::MessageParser<LeaseVehicleRequest>(() => new LeaseVehicleRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LeaseVehicleRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CosmicDealership.Vehicle.V1.VehicleServiceReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaseVehicleRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaseVehicleRequest(LeaseVehicleRequest other) : this() {
      user_ = other.user_ != null ? other.user_.Clone() : null;
      vehicleId_ = other.vehicleId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaseVehicleRequest Clone() {
      return new LeaseVehicleRequest(this);
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 1;
    private global::CosmicDealership.User.V1.User user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CosmicDealership.User.V1.User User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "vehicle_id" field.</summary>
    public const int VehicleIdFieldNumber = 2;
    private string vehicleId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VehicleId {
      get { return vehicleId_; }
      set {
        vehicleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LeaseVehicleRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LeaseVehicleRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(User, other.User)) return false;
      if (VehicleId != other.VehicleId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (user_ != null) hash ^= User.GetHashCode();
      if (VehicleId.Length != 0) hash ^= VehicleId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (user_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(User);
      }
      if (VehicleId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(VehicleId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (VehicleId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VehicleId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LeaseVehicleRequest other) {
      if (other == null) {
        return;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          User = new global::CosmicDealership.User.V1.User();
        }
        User.MergeFrom(other.User);
      }
      if (other.VehicleId.Length != 0) {
        VehicleId = other.VehicleId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (user_ == null) {
              User = new global::CosmicDealership.User.V1.User();
            }
            input.ReadMessage(User);
            break;
          }
          case 18: {
            VehicleId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LeaseVehicleResponse : pb::IMessage<LeaseVehicleResponse> {
    private static readonly pb::MessageParser<LeaseVehicleResponse> _parser = new pb::MessageParser<LeaseVehicleResponse>(() => new LeaseVehicleResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LeaseVehicleResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CosmicDealership.Vehicle.V1.VehicleServiceReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaseVehicleResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaseVehicleResponse(LeaseVehicleResponse other) : this() {
      switch (other.ResponseCase) {
        case ResponseOneofCase.Success:
          Success = other.Success;
          break;
        case ResponseOneofCase.VehicleNotFound:
          VehicleNotFound = other.VehicleNotFound;
          break;
        case ResponseOneofCase.VehicleCurrentlyLeased:
          VehicleCurrentlyLeased = other.VehicleCurrentlyLeased;
          break;
        case ResponseOneofCase.PermissionDenied:
          PermissionDenied = other.PermissionDenied;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LeaseVehicleResponse Clone() {
      return new LeaseVehicleResponse(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Success {
      get { return responseCase_ == ResponseOneofCase.Success ? (string) response_ : ""; }
      set {
        response_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        responseCase_ = ResponseOneofCase.Success;
      }
    }

    /// <summary>Field number for the "vehicle_not_found" field.</summary>
    public const int VehicleNotFoundFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VehicleNotFound {
      get { return responseCase_ == ResponseOneofCase.VehicleNotFound ? (string) response_ : ""; }
      set {
        response_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        responseCase_ = ResponseOneofCase.VehicleNotFound;
      }
    }

    /// <summary>Field number for the "vehicle_currently_leased" field.</summary>
    public const int VehicleCurrentlyLeasedFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VehicleCurrentlyLeased {
      get { return responseCase_ == ResponseOneofCase.VehicleCurrentlyLeased ? (string) response_ : ""; }
      set {
        response_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        responseCase_ = ResponseOneofCase.VehicleCurrentlyLeased;
      }
    }

    /// <summary>Field number for the "permission_denied" field.</summary>
    public const int PermissionDeniedFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PermissionDenied {
      get { return responseCase_ == ResponseOneofCase.PermissionDenied ? (string) response_ : ""; }
      set {
        response_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        responseCase_ = ResponseOneofCase.PermissionDenied;
      }
    }

    private object response_;
    /// <summary>Enum of possible cases for the "response" oneof.</summary>
    public enum ResponseOneofCase {
      None = 0,
      Success = 1,
      VehicleNotFound = 2,
      VehicleCurrentlyLeased = 3,
      PermissionDenied = 4,
    }
    private ResponseOneofCase responseCase_ = ResponseOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseOneofCase ResponseCase {
      get { return responseCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResponse() {
      responseCase_ = ResponseOneofCase.None;
      response_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LeaseVehicleResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LeaseVehicleResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (VehicleNotFound != other.VehicleNotFound) return false;
      if (VehicleCurrentlyLeased != other.VehicleCurrentlyLeased) return false;
      if (PermissionDenied != other.PermissionDenied) return false;
      if (ResponseCase != other.ResponseCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (responseCase_ == ResponseOneofCase.Success) hash ^= Success.GetHashCode();
      if (responseCase_ == ResponseOneofCase.VehicleNotFound) hash ^= VehicleNotFound.GetHashCode();
      if (responseCase_ == ResponseOneofCase.VehicleCurrentlyLeased) hash ^= VehicleCurrentlyLeased.GetHashCode();
      if (responseCase_ == ResponseOneofCase.PermissionDenied) hash ^= PermissionDenied.GetHashCode();
      hash ^= (int) responseCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (responseCase_ == ResponseOneofCase.Success) {
        output.WriteRawTag(10);
        output.WriteString(Success);
      }
      if (responseCase_ == ResponseOneofCase.VehicleNotFound) {
        output.WriteRawTag(18);
        output.WriteString(VehicleNotFound);
      }
      if (responseCase_ == ResponseOneofCase.VehicleCurrentlyLeased) {
        output.WriteRawTag(26);
        output.WriteString(VehicleCurrentlyLeased);
      }
      if (responseCase_ == ResponseOneofCase.PermissionDenied) {
        output.WriteRawTag(34);
        output.WriteString(PermissionDenied);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (responseCase_ == ResponseOneofCase.Success) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Success);
      }
      if (responseCase_ == ResponseOneofCase.VehicleNotFound) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VehicleNotFound);
      }
      if (responseCase_ == ResponseOneofCase.VehicleCurrentlyLeased) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VehicleCurrentlyLeased);
      }
      if (responseCase_ == ResponseOneofCase.PermissionDenied) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PermissionDenied);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LeaseVehicleResponse other) {
      if (other == null) {
        return;
      }
      switch (other.ResponseCase) {
        case ResponseOneofCase.Success:
          Success = other.Success;
          break;
        case ResponseOneofCase.VehicleNotFound:
          VehicleNotFound = other.VehicleNotFound;
          break;
        case ResponseOneofCase.VehicleCurrentlyLeased:
          VehicleCurrentlyLeased = other.VehicleCurrentlyLeased;
          break;
        case ResponseOneofCase.PermissionDenied:
          PermissionDenied = other.PermissionDenied;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Success = input.ReadString();
            break;
          }
          case 18: {
            VehicleNotFound = input.ReadString();
            break;
          }
          case 26: {
            VehicleCurrentlyLeased = input.ReadString();
            break;
          }
          case 34: {
            PermissionDenied = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReturnVehicleRequest : pb::IMessage<ReturnVehicleRequest> {
    private static readonly pb::MessageParser<ReturnVehicleRequest> _parser = new pb::MessageParser<ReturnVehicleRequest>(() => new ReturnVehicleRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReturnVehicleRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CosmicDealership.Vehicle.V1.VehicleServiceReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReturnVehicleRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReturnVehicleRequest(ReturnVehicleRequest other) : this() {
      user_ = other.user_ != null ? other.user_.Clone() : null;
      vehicleId_ = other.vehicleId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReturnVehicleRequest Clone() {
      return new ReturnVehicleRequest(this);
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 1;
    private global::CosmicDealership.User.V1.User user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CosmicDealership.User.V1.User User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "vehicle_id" field.</summary>
    public const int VehicleIdFieldNumber = 2;
    private string vehicleId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VehicleId {
      get { return vehicleId_; }
      set {
        vehicleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReturnVehicleRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReturnVehicleRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(User, other.User)) return false;
      if (VehicleId != other.VehicleId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (user_ != null) hash ^= User.GetHashCode();
      if (VehicleId.Length != 0) hash ^= VehicleId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (user_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(User);
      }
      if (VehicleId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(VehicleId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (VehicleId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VehicleId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReturnVehicleRequest other) {
      if (other == null) {
        return;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          User = new global::CosmicDealership.User.V1.User();
        }
        User.MergeFrom(other.User);
      }
      if (other.VehicleId.Length != 0) {
        VehicleId = other.VehicleId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (user_ == null) {
              User = new global::CosmicDealership.User.V1.User();
            }
            input.ReadMessage(User);
            break;
          }
          case 18: {
            VehicleId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReturnVehicleResponse : pb::IMessage<ReturnVehicleResponse> {
    private static readonly pb::MessageParser<ReturnVehicleResponse> _parser = new pb::MessageParser<ReturnVehicleResponse>(() => new ReturnVehicleResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReturnVehicleResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CosmicDealership.Vehicle.V1.VehicleServiceReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReturnVehicleResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReturnVehicleResponse(ReturnVehicleResponse other) : this() {
      switch (other.ResponseCase) {
        case ResponseOneofCase.Success:
          Success = other.Success;
          break;
        case ResponseOneofCase.VehicleNotFound:
          VehicleNotFound = other.VehicleNotFound;
          break;
        case ResponseOneofCase.VehicleAlreadyReturned:
          VehicleAlreadyReturned = other.VehicleAlreadyReturned;
          break;
        case ResponseOneofCase.PermissionDenied:
          PermissionDenied = other.PermissionDenied;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReturnVehicleResponse Clone() {
      return new ReturnVehicleResponse(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Success {
      get { return responseCase_ == ResponseOneofCase.Success ? (string) response_ : ""; }
      set {
        response_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        responseCase_ = ResponseOneofCase.Success;
      }
    }

    /// <summary>Field number for the "vehicle_not_found" field.</summary>
    public const int VehicleNotFoundFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VehicleNotFound {
      get { return responseCase_ == ResponseOneofCase.VehicleNotFound ? (string) response_ : ""; }
      set {
        response_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        responseCase_ = ResponseOneofCase.VehicleNotFound;
      }
    }

    /// <summary>Field number for the "vehicle_already_returned" field.</summary>
    public const int VehicleAlreadyReturnedFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VehicleAlreadyReturned {
      get { return responseCase_ == ResponseOneofCase.VehicleAlreadyReturned ? (string) response_ : ""; }
      set {
        response_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        responseCase_ = ResponseOneofCase.VehicleAlreadyReturned;
      }
    }

    /// <summary>Field number for the "permission_denied" field.</summary>
    public const int PermissionDeniedFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PermissionDenied {
      get { return responseCase_ == ResponseOneofCase.PermissionDenied ? (string) response_ : ""; }
      set {
        response_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        responseCase_ = ResponseOneofCase.PermissionDenied;
      }
    }

    private object response_;
    /// <summary>Enum of possible cases for the "response" oneof.</summary>
    public enum ResponseOneofCase {
      None = 0,
      Success = 1,
      VehicleNotFound = 2,
      VehicleAlreadyReturned = 3,
      PermissionDenied = 4,
    }
    private ResponseOneofCase responseCase_ = ResponseOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseOneofCase ResponseCase {
      get { return responseCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResponse() {
      responseCase_ = ResponseOneofCase.None;
      response_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReturnVehicleResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReturnVehicleResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (VehicleNotFound != other.VehicleNotFound) return false;
      if (VehicleAlreadyReturned != other.VehicleAlreadyReturned) return false;
      if (PermissionDenied != other.PermissionDenied) return false;
      if (ResponseCase != other.ResponseCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (responseCase_ == ResponseOneofCase.Success) hash ^= Success.GetHashCode();
      if (responseCase_ == ResponseOneofCase.VehicleNotFound) hash ^= VehicleNotFound.GetHashCode();
      if (responseCase_ == ResponseOneofCase.VehicleAlreadyReturned) hash ^= VehicleAlreadyReturned.GetHashCode();
      if (responseCase_ == ResponseOneofCase.PermissionDenied) hash ^= PermissionDenied.GetHashCode();
      hash ^= (int) responseCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (responseCase_ == ResponseOneofCase.Success) {
        output.WriteRawTag(10);
        output.WriteString(Success);
      }
      if (responseCase_ == ResponseOneofCase.VehicleNotFound) {
        output.WriteRawTag(18);
        output.WriteString(VehicleNotFound);
      }
      if (responseCase_ == ResponseOneofCase.VehicleAlreadyReturned) {
        output.WriteRawTag(26);
        output.WriteString(VehicleAlreadyReturned);
      }
      if (responseCase_ == ResponseOneofCase.PermissionDenied) {
        output.WriteRawTag(34);
        output.WriteString(PermissionDenied);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (responseCase_ == ResponseOneofCase.Success) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Success);
      }
      if (responseCase_ == ResponseOneofCase.VehicleNotFound) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VehicleNotFound);
      }
      if (responseCase_ == ResponseOneofCase.VehicleAlreadyReturned) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VehicleAlreadyReturned);
      }
      if (responseCase_ == ResponseOneofCase.PermissionDenied) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PermissionDenied);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReturnVehicleResponse other) {
      if (other == null) {
        return;
      }
      switch (other.ResponseCase) {
        case ResponseOneofCase.Success:
          Success = other.Success;
          break;
        case ResponseOneofCase.VehicleNotFound:
          VehicleNotFound = other.VehicleNotFound;
          break;
        case ResponseOneofCase.VehicleAlreadyReturned:
          VehicleAlreadyReturned = other.VehicleAlreadyReturned;
          break;
        case ResponseOneofCase.PermissionDenied:
          PermissionDenied = other.PermissionDenied;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Success = input.ReadString();
            break;
          }
          case 18: {
            VehicleNotFound = input.ReadString();
            break;
          }
          case 26: {
            VehicleAlreadyReturned = input.ReadString();
            break;
          }
          case 34: {
            PermissionDenied = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
