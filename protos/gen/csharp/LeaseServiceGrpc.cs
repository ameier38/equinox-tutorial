// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: tutorial/lease/v1/lease_service.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Tutorial.Lease.V1 {
  /// <summary>
  /// Service to handle interactions with the Lease.
  /// </summary>
  public static partial class LeaseService
  {
    static readonly string __ServiceName = "tutorial.lease.v1.LeaseService";

    static readonly grpc::Marshaller<global::Tutorial.Lease.V1.RequestLeaseRequest> __Marshaller_tutorial_lease_v1_RequestLeaseRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tutorial.Lease.V1.RequestLeaseRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tutorial.Lease.V1.RequestLeaseResponse> __Marshaller_tutorial_lease_v1_RequestLeaseResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tutorial.Lease.V1.RequestLeaseResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tutorial.Lease.V1.ListLeasesRequest> __Marshaller_tutorial_lease_v1_ListLeasesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tutorial.Lease.V1.ListLeasesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tutorial.Lease.V1.ListLeasesResponse> __Marshaller_tutorial_lease_v1_ListLeasesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tutorial.Lease.V1.ListLeasesResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tutorial.Lease.V1.GetLeaseRequest> __Marshaller_tutorial_lease_v1_GetLeaseRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tutorial.Lease.V1.GetLeaseRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tutorial.Lease.V1.GetLeaseResponse> __Marshaller_tutorial_lease_v1_GetLeaseResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tutorial.Lease.V1.GetLeaseResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tutorial.Lease.V1.AcceptLeaseRequest> __Marshaller_tutorial_lease_v1_AcceptLeaseRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tutorial.Lease.V1.AcceptLeaseRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tutorial.Lease.V1.AcceptLeaseResponse> __Marshaller_tutorial_lease_v1_AcceptLeaseResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tutorial.Lease.V1.AcceptLeaseResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tutorial.Lease.V1.CreatePaymentRequest> __Marshaller_tutorial_lease_v1_CreatePaymentRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tutorial.Lease.V1.CreatePaymentRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tutorial.Lease.V1.CreatePaymentResponse> __Marshaller_tutorial_lease_v1_CreatePaymentResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tutorial.Lease.V1.CreatePaymentResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tutorial.Lease.V1.SettlePaymentRequest> __Marshaller_tutorial_lease_v1_SettlePaymentRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tutorial.Lease.V1.SettlePaymentRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tutorial.Lease.V1.SettlePaymentResponse> __Marshaller_tutorial_lease_v1_SettlePaymentResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tutorial.Lease.V1.SettlePaymentResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tutorial.Lease.V1.ReturnPaymentRequest> __Marshaller_tutorial_lease_v1_ReturnPaymentRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tutorial.Lease.V1.ReturnPaymentRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tutorial.Lease.V1.ReturnPaymentResponse> __Marshaller_tutorial_lease_v1_ReturnPaymentResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tutorial.Lease.V1.ReturnPaymentResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tutorial.Lease.V1.ReturnVehicleRequest> __Marshaller_tutorial_lease_v1_ReturnVehicleRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tutorial.Lease.V1.ReturnVehicleRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tutorial.Lease.V1.ReturnVehicleResponse> __Marshaller_tutorial_lease_v1_ReturnVehicleResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tutorial.Lease.V1.ReturnVehicleResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Tutorial.Lease.V1.RequestLeaseRequest, global::Tutorial.Lease.V1.RequestLeaseResponse> __Method_RequestLease = new grpc::Method<global::Tutorial.Lease.V1.RequestLeaseRequest, global::Tutorial.Lease.V1.RequestLeaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RequestLease",
        __Marshaller_tutorial_lease_v1_RequestLeaseRequest,
        __Marshaller_tutorial_lease_v1_RequestLeaseResponse);

    static readonly grpc::Method<global::Tutorial.Lease.V1.ListLeasesRequest, global::Tutorial.Lease.V1.ListLeasesResponse> __Method_ListLeases = new grpc::Method<global::Tutorial.Lease.V1.ListLeasesRequest, global::Tutorial.Lease.V1.ListLeasesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListLeases",
        __Marshaller_tutorial_lease_v1_ListLeasesRequest,
        __Marshaller_tutorial_lease_v1_ListLeasesResponse);

    static readonly grpc::Method<global::Tutorial.Lease.V1.GetLeaseRequest, global::Tutorial.Lease.V1.GetLeaseResponse> __Method_GetLease = new grpc::Method<global::Tutorial.Lease.V1.GetLeaseRequest, global::Tutorial.Lease.V1.GetLeaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetLease",
        __Marshaller_tutorial_lease_v1_GetLeaseRequest,
        __Marshaller_tutorial_lease_v1_GetLeaseResponse);

    static readonly grpc::Method<global::Tutorial.Lease.V1.AcceptLeaseRequest, global::Tutorial.Lease.V1.AcceptLeaseResponse> __Method_AcceptLease = new grpc::Method<global::Tutorial.Lease.V1.AcceptLeaseRequest, global::Tutorial.Lease.V1.AcceptLeaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AcceptLease",
        __Marshaller_tutorial_lease_v1_AcceptLeaseRequest,
        __Marshaller_tutorial_lease_v1_AcceptLeaseResponse);

    static readonly grpc::Method<global::Tutorial.Lease.V1.CreatePaymentRequest, global::Tutorial.Lease.V1.CreatePaymentResponse> __Method_CreatePayment = new grpc::Method<global::Tutorial.Lease.V1.CreatePaymentRequest, global::Tutorial.Lease.V1.CreatePaymentResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreatePayment",
        __Marshaller_tutorial_lease_v1_CreatePaymentRequest,
        __Marshaller_tutorial_lease_v1_CreatePaymentResponse);

    static readonly grpc::Method<global::Tutorial.Lease.V1.SettlePaymentRequest, global::Tutorial.Lease.V1.SettlePaymentResponse> __Method_SettlePayment = new grpc::Method<global::Tutorial.Lease.V1.SettlePaymentRequest, global::Tutorial.Lease.V1.SettlePaymentResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SettlePayment",
        __Marshaller_tutorial_lease_v1_SettlePaymentRequest,
        __Marshaller_tutorial_lease_v1_SettlePaymentResponse);

    static readonly grpc::Method<global::Tutorial.Lease.V1.ReturnPaymentRequest, global::Tutorial.Lease.V1.ReturnPaymentResponse> __Method_ReturnPayment = new grpc::Method<global::Tutorial.Lease.V1.ReturnPaymentRequest, global::Tutorial.Lease.V1.ReturnPaymentResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ReturnPayment",
        __Marshaller_tutorial_lease_v1_ReturnPaymentRequest,
        __Marshaller_tutorial_lease_v1_ReturnPaymentResponse);

    static readonly grpc::Method<global::Tutorial.Lease.V1.ReturnVehicleRequest, global::Tutorial.Lease.V1.ReturnVehicleResponse> __Method_ReturnVehicle = new grpc::Method<global::Tutorial.Lease.V1.ReturnVehicleRequest, global::Tutorial.Lease.V1.ReturnVehicleResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ReturnVehicle",
        __Marshaller_tutorial_lease_v1_ReturnVehicleRequest,
        __Marshaller_tutorial_lease_v1_ReturnVehicleResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Tutorial.Lease.V1.LeaseServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of LeaseService</summary>
    [grpc::BindServiceMethod(typeof(LeaseService), "BindService")]
    public abstract partial class LeaseServiceBase
    {
      /// <summary>
      /// Request a lease for a vehicle.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Tutorial.Lease.V1.RequestLeaseResponse> RequestLease(global::Tutorial.Lease.V1.RequestLeaseRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List the leases that have been created.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Tutorial.Lease.V1.ListLeasesResponse> ListLeases(global::Tutorial.Lease.V1.ListLeasesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a lease as of a point in time.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Tutorial.Lease.V1.GetLeaseResponse> GetLease(global::Tutorial.Lease.V1.GetLeaseRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Accept a new lease.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Tutorial.Lease.V1.AcceptLeaseResponse> AcceptLease(global::Tutorial.Lease.V1.AcceptLeaseRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Create a payment.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Tutorial.Lease.V1.CreatePaymentResponse> CreatePayment(global::Tutorial.Lease.V1.CreatePaymentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Settle a payment.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Tutorial.Lease.V1.SettlePaymentResponse> SettlePayment(global::Tutorial.Lease.V1.SettlePaymentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Return a payment.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Tutorial.Lease.V1.ReturnPaymentResponse> ReturnPayment(global::Tutorial.Lease.V1.ReturnPaymentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Return a vehicle.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Tutorial.Lease.V1.ReturnVehicleResponse> ReturnVehicle(global::Tutorial.Lease.V1.ReturnVehicleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for LeaseService</summary>
    public partial class LeaseServiceClient : grpc::ClientBase<LeaseServiceClient>
    {
      /// <summary>Creates a new client for LeaseService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public LeaseServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for LeaseService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public LeaseServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected LeaseServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected LeaseServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Request a lease for a vehicle.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Tutorial.Lease.V1.RequestLeaseResponse RequestLease(global::Tutorial.Lease.V1.RequestLeaseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RequestLease(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Request a lease for a vehicle.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Tutorial.Lease.V1.RequestLeaseResponse RequestLease(global::Tutorial.Lease.V1.RequestLeaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RequestLease, null, options, request);
      }
      /// <summary>
      /// Request a lease for a vehicle.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Tutorial.Lease.V1.RequestLeaseResponse> RequestLeaseAsync(global::Tutorial.Lease.V1.RequestLeaseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RequestLeaseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Request a lease for a vehicle.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Tutorial.Lease.V1.RequestLeaseResponse> RequestLeaseAsync(global::Tutorial.Lease.V1.RequestLeaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RequestLease, null, options, request);
      }
      /// <summary>
      /// List the leases that have been created.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Tutorial.Lease.V1.ListLeasesResponse ListLeases(global::Tutorial.Lease.V1.ListLeasesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListLeases(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List the leases that have been created.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Tutorial.Lease.V1.ListLeasesResponse ListLeases(global::Tutorial.Lease.V1.ListLeasesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListLeases, null, options, request);
      }
      /// <summary>
      /// List the leases that have been created.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Tutorial.Lease.V1.ListLeasesResponse> ListLeasesAsync(global::Tutorial.Lease.V1.ListLeasesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListLeasesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List the leases that have been created.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Tutorial.Lease.V1.ListLeasesResponse> ListLeasesAsync(global::Tutorial.Lease.V1.ListLeasesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListLeases, null, options, request);
      }
      /// <summary>
      /// Get a lease as of a point in time.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Tutorial.Lease.V1.GetLeaseResponse GetLease(global::Tutorial.Lease.V1.GetLeaseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetLease(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a lease as of a point in time.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Tutorial.Lease.V1.GetLeaseResponse GetLease(global::Tutorial.Lease.V1.GetLeaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetLease, null, options, request);
      }
      /// <summary>
      /// Get a lease as of a point in time.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Tutorial.Lease.V1.GetLeaseResponse> GetLeaseAsync(global::Tutorial.Lease.V1.GetLeaseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetLeaseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a lease as of a point in time.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Tutorial.Lease.V1.GetLeaseResponse> GetLeaseAsync(global::Tutorial.Lease.V1.GetLeaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetLease, null, options, request);
      }
      /// <summary>
      /// Accept a new lease.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Tutorial.Lease.V1.AcceptLeaseResponse AcceptLease(global::Tutorial.Lease.V1.AcceptLeaseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AcceptLease(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Accept a new lease.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Tutorial.Lease.V1.AcceptLeaseResponse AcceptLease(global::Tutorial.Lease.V1.AcceptLeaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AcceptLease, null, options, request);
      }
      /// <summary>
      /// Accept a new lease.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Tutorial.Lease.V1.AcceptLeaseResponse> AcceptLeaseAsync(global::Tutorial.Lease.V1.AcceptLeaseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AcceptLeaseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Accept a new lease.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Tutorial.Lease.V1.AcceptLeaseResponse> AcceptLeaseAsync(global::Tutorial.Lease.V1.AcceptLeaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AcceptLease, null, options, request);
      }
      /// <summary>
      /// Create a payment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Tutorial.Lease.V1.CreatePaymentResponse CreatePayment(global::Tutorial.Lease.V1.CreatePaymentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreatePayment(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a payment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Tutorial.Lease.V1.CreatePaymentResponse CreatePayment(global::Tutorial.Lease.V1.CreatePaymentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreatePayment, null, options, request);
      }
      /// <summary>
      /// Create a payment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Tutorial.Lease.V1.CreatePaymentResponse> CreatePaymentAsync(global::Tutorial.Lease.V1.CreatePaymentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreatePaymentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a payment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Tutorial.Lease.V1.CreatePaymentResponse> CreatePaymentAsync(global::Tutorial.Lease.V1.CreatePaymentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreatePayment, null, options, request);
      }
      /// <summary>
      /// Settle a payment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Tutorial.Lease.V1.SettlePaymentResponse SettlePayment(global::Tutorial.Lease.V1.SettlePaymentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SettlePayment(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Settle a payment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Tutorial.Lease.V1.SettlePaymentResponse SettlePayment(global::Tutorial.Lease.V1.SettlePaymentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SettlePayment, null, options, request);
      }
      /// <summary>
      /// Settle a payment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Tutorial.Lease.V1.SettlePaymentResponse> SettlePaymentAsync(global::Tutorial.Lease.V1.SettlePaymentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SettlePaymentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Settle a payment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Tutorial.Lease.V1.SettlePaymentResponse> SettlePaymentAsync(global::Tutorial.Lease.V1.SettlePaymentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SettlePayment, null, options, request);
      }
      /// <summary>
      /// Return a payment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Tutorial.Lease.V1.ReturnPaymentResponse ReturnPayment(global::Tutorial.Lease.V1.ReturnPaymentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReturnPayment(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Return a payment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Tutorial.Lease.V1.ReturnPaymentResponse ReturnPayment(global::Tutorial.Lease.V1.ReturnPaymentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ReturnPayment, null, options, request);
      }
      /// <summary>
      /// Return a payment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Tutorial.Lease.V1.ReturnPaymentResponse> ReturnPaymentAsync(global::Tutorial.Lease.V1.ReturnPaymentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReturnPaymentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Return a payment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Tutorial.Lease.V1.ReturnPaymentResponse> ReturnPaymentAsync(global::Tutorial.Lease.V1.ReturnPaymentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ReturnPayment, null, options, request);
      }
      /// <summary>
      /// Return a vehicle.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Tutorial.Lease.V1.ReturnVehicleResponse ReturnVehicle(global::Tutorial.Lease.V1.ReturnVehicleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReturnVehicle(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Return a vehicle.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Tutorial.Lease.V1.ReturnVehicleResponse ReturnVehicle(global::Tutorial.Lease.V1.ReturnVehicleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ReturnVehicle, null, options, request);
      }
      /// <summary>
      /// Return a vehicle.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Tutorial.Lease.V1.ReturnVehicleResponse> ReturnVehicleAsync(global::Tutorial.Lease.V1.ReturnVehicleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReturnVehicleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Return a vehicle.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Tutorial.Lease.V1.ReturnVehicleResponse> ReturnVehicleAsync(global::Tutorial.Lease.V1.ReturnVehicleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ReturnVehicle, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override LeaseServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new LeaseServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(LeaseServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_RequestLease, serviceImpl.RequestLease)
          .AddMethod(__Method_ListLeases, serviceImpl.ListLeases)
          .AddMethod(__Method_GetLease, serviceImpl.GetLease)
          .AddMethod(__Method_AcceptLease, serviceImpl.AcceptLease)
          .AddMethod(__Method_CreatePayment, serviceImpl.CreatePayment)
          .AddMethod(__Method_SettlePayment, serviceImpl.SettlePayment)
          .AddMethod(__Method_ReturnPayment, serviceImpl.ReturnPayment)
          .AddMethod(__Method_ReturnVehicle, serviceImpl.ReturnVehicle).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, LeaseServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_RequestLease, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tutorial.Lease.V1.RequestLeaseRequest, global::Tutorial.Lease.V1.RequestLeaseResponse>(serviceImpl.RequestLease));
      serviceBinder.AddMethod(__Method_ListLeases, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tutorial.Lease.V1.ListLeasesRequest, global::Tutorial.Lease.V1.ListLeasesResponse>(serviceImpl.ListLeases));
      serviceBinder.AddMethod(__Method_GetLease, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tutorial.Lease.V1.GetLeaseRequest, global::Tutorial.Lease.V1.GetLeaseResponse>(serviceImpl.GetLease));
      serviceBinder.AddMethod(__Method_AcceptLease, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tutorial.Lease.V1.AcceptLeaseRequest, global::Tutorial.Lease.V1.AcceptLeaseResponse>(serviceImpl.AcceptLease));
      serviceBinder.AddMethod(__Method_CreatePayment, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tutorial.Lease.V1.CreatePaymentRequest, global::Tutorial.Lease.V1.CreatePaymentResponse>(serviceImpl.CreatePayment));
      serviceBinder.AddMethod(__Method_SettlePayment, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tutorial.Lease.V1.SettlePaymentRequest, global::Tutorial.Lease.V1.SettlePaymentResponse>(serviceImpl.SettlePayment));
      serviceBinder.AddMethod(__Method_ReturnPayment, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tutorial.Lease.V1.ReturnPaymentRequest, global::Tutorial.Lease.V1.ReturnPaymentResponse>(serviceImpl.ReturnPayment));
      serviceBinder.AddMethod(__Method_ReturnVehicle, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tutorial.Lease.V1.ReturnVehicleRequest, global::Tutorial.Lease.V1.ReturnVehicleResponse>(serviceImpl.ReturnVehicle));
    }

  }
}
#endregion
