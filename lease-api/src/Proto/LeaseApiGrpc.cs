// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: tutorial/lease/v1/lease_api.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Tutorial.Lease.V1 {
  /// <summary>
  /// API to handle interactions with the Lease.
  /// </summary>
  public static partial class LeaseAPI
  {
    static readonly string __ServiceName = "tutorial.lease.v1.LeaseAPI";

    static readonly grpc::Marshaller<global::Tutorial.Lease.V1.DeleteLeaseEventRequest> __Marshaller_tutorial_lease_v1_DeleteLeaseEventRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tutorial.Lease.V1.DeleteLeaseEventRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tutorial.Lease.V1.DeleteLeaseEventResponse> __Marshaller_tutorial_lease_v1_DeleteLeaseEventResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tutorial.Lease.V1.DeleteLeaseEventResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tutorial.Lease.V1.ListLeasesRequest> __Marshaller_tutorial_lease_v1_ListLeasesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tutorial.Lease.V1.ListLeasesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tutorial.Lease.V1.ListLeasesResponse> __Marshaller_tutorial_lease_v1_ListLeasesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tutorial.Lease.V1.ListLeasesResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tutorial.Lease.V1.ListLeaseEventsRequest> __Marshaller_tutorial_lease_v1_ListLeaseEventsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tutorial.Lease.V1.ListLeaseEventsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tutorial.Lease.V1.ListLeaseEventsResponse> __Marshaller_tutorial_lease_v1_ListLeaseEventsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tutorial.Lease.V1.ListLeaseEventsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tutorial.Lease.V1.GetLeaseRequest> __Marshaller_tutorial_lease_v1_GetLeaseRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tutorial.Lease.V1.GetLeaseRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tutorial.Lease.V1.GetLeaseResponse> __Marshaller_tutorial_lease_v1_GetLeaseResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tutorial.Lease.V1.GetLeaseResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tutorial.Lease.V1.CreateLeaseRequest> __Marshaller_tutorial_lease_v1_CreateLeaseRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tutorial.Lease.V1.CreateLeaseRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tutorial.Lease.V1.CreateLeaseResponse> __Marshaller_tutorial_lease_v1_CreateLeaseResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tutorial.Lease.V1.CreateLeaseResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tutorial.Lease.V1.TerminateLeaseRequest> __Marshaller_tutorial_lease_v1_TerminateLeaseRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tutorial.Lease.V1.TerminateLeaseRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tutorial.Lease.V1.TerminateLeaseResponse> __Marshaller_tutorial_lease_v1_TerminateLeaseResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tutorial.Lease.V1.TerminateLeaseResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tutorial.Lease.V1.SchedulePaymentRequest> __Marshaller_tutorial_lease_v1_SchedulePaymentRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tutorial.Lease.V1.SchedulePaymentRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tutorial.Lease.V1.SchedulePaymentResponse> __Marshaller_tutorial_lease_v1_SchedulePaymentResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tutorial.Lease.V1.SchedulePaymentResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tutorial.Lease.V1.ReceivePaymentRequest> __Marshaller_tutorial_lease_v1_ReceivePaymentRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tutorial.Lease.V1.ReceivePaymentRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tutorial.Lease.V1.ReceivePaymentResponse> __Marshaller_tutorial_lease_v1_ReceivePaymentResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tutorial.Lease.V1.ReceivePaymentResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Tutorial.Lease.V1.DeleteLeaseEventRequest, global::Tutorial.Lease.V1.DeleteLeaseEventResponse> __Method_DeleteLeaseEvent = new grpc::Method<global::Tutorial.Lease.V1.DeleteLeaseEventRequest, global::Tutorial.Lease.V1.DeleteLeaseEventResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteLeaseEvent",
        __Marshaller_tutorial_lease_v1_DeleteLeaseEventRequest,
        __Marshaller_tutorial_lease_v1_DeleteLeaseEventResponse);

    static readonly grpc::Method<global::Tutorial.Lease.V1.ListLeasesRequest, global::Tutorial.Lease.V1.ListLeasesResponse> __Method_ListLeases = new grpc::Method<global::Tutorial.Lease.V1.ListLeasesRequest, global::Tutorial.Lease.V1.ListLeasesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListLeases",
        __Marshaller_tutorial_lease_v1_ListLeasesRequest,
        __Marshaller_tutorial_lease_v1_ListLeasesResponse);

    static readonly grpc::Method<global::Tutorial.Lease.V1.ListLeaseEventsRequest, global::Tutorial.Lease.V1.ListLeaseEventsResponse> __Method_ListLeaseEvents = new grpc::Method<global::Tutorial.Lease.V1.ListLeaseEventsRequest, global::Tutorial.Lease.V1.ListLeaseEventsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListLeaseEvents",
        __Marshaller_tutorial_lease_v1_ListLeaseEventsRequest,
        __Marshaller_tutorial_lease_v1_ListLeaseEventsResponse);

    static readonly grpc::Method<global::Tutorial.Lease.V1.GetLeaseRequest, global::Tutorial.Lease.V1.GetLeaseResponse> __Method_GetLease = new grpc::Method<global::Tutorial.Lease.V1.GetLeaseRequest, global::Tutorial.Lease.V1.GetLeaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetLease",
        __Marshaller_tutorial_lease_v1_GetLeaseRequest,
        __Marshaller_tutorial_lease_v1_GetLeaseResponse);

    static readonly grpc::Method<global::Tutorial.Lease.V1.CreateLeaseRequest, global::Tutorial.Lease.V1.CreateLeaseResponse> __Method_CreateLease = new grpc::Method<global::Tutorial.Lease.V1.CreateLeaseRequest, global::Tutorial.Lease.V1.CreateLeaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateLease",
        __Marshaller_tutorial_lease_v1_CreateLeaseRequest,
        __Marshaller_tutorial_lease_v1_CreateLeaseResponse);

    static readonly grpc::Method<global::Tutorial.Lease.V1.TerminateLeaseRequest, global::Tutorial.Lease.V1.TerminateLeaseResponse> __Method_TerminateLease = new grpc::Method<global::Tutorial.Lease.V1.TerminateLeaseRequest, global::Tutorial.Lease.V1.TerminateLeaseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TerminateLease",
        __Marshaller_tutorial_lease_v1_TerminateLeaseRequest,
        __Marshaller_tutorial_lease_v1_TerminateLeaseResponse);

    static readonly grpc::Method<global::Tutorial.Lease.V1.SchedulePaymentRequest, global::Tutorial.Lease.V1.SchedulePaymentResponse> __Method_SchedulePayment = new grpc::Method<global::Tutorial.Lease.V1.SchedulePaymentRequest, global::Tutorial.Lease.V1.SchedulePaymentResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SchedulePayment",
        __Marshaller_tutorial_lease_v1_SchedulePaymentRequest,
        __Marshaller_tutorial_lease_v1_SchedulePaymentResponse);

    static readonly grpc::Method<global::Tutorial.Lease.V1.ReceivePaymentRequest, global::Tutorial.Lease.V1.ReceivePaymentResponse> __Method_ReceivePayment = new grpc::Method<global::Tutorial.Lease.V1.ReceivePaymentRequest, global::Tutorial.Lease.V1.ReceivePaymentResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ReceivePayment",
        __Marshaller_tutorial_lease_v1_ReceivePaymentRequest,
        __Marshaller_tutorial_lease_v1_ReceivePaymentResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Tutorial.Lease.V1.LeaseApiReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of LeaseAPI</summary>
    [grpc::BindServiceMethod(typeof(LeaseAPI), "BindService")]
    public abstract partial class LeaseAPIBase
    {
      /// <summary>
      /// Delete a lease event.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Tutorial.Lease.V1.DeleteLeaseEventResponse> DeleteLeaseEvent(global::Tutorial.Lease.V1.DeleteLeaseEventRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List the leases that have been created.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Tutorial.Lease.V1.ListLeasesResponse> ListLeases(global::Tutorial.Lease.V1.ListLeasesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List the lease events that have occurred as of a point in time.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Tutorial.Lease.V1.ListLeaseEventsResponse> ListLeaseEvents(global::Tutorial.Lease.V1.ListLeaseEventsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a lease as of a point in time.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Tutorial.Lease.V1.GetLeaseResponse> GetLease(global::Tutorial.Lease.V1.GetLeaseRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Create a new lease.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Tutorial.Lease.V1.CreateLeaseResponse> CreateLease(global::Tutorial.Lease.V1.CreateLeaseRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Terminate an existing lease.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Tutorial.Lease.V1.TerminateLeaseResponse> TerminateLease(global::Tutorial.Lease.V1.TerminateLeaseRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Schedule a payment.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Tutorial.Lease.V1.SchedulePaymentResponse> SchedulePayment(global::Tutorial.Lease.V1.SchedulePaymentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Receive a payment.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Tutorial.Lease.V1.ReceivePaymentResponse> ReceivePayment(global::Tutorial.Lease.V1.ReceivePaymentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for LeaseAPI</summary>
    public partial class LeaseAPIClient : grpc::ClientBase<LeaseAPIClient>
    {
      /// <summary>Creates a new client for LeaseAPI</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public LeaseAPIClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for LeaseAPI that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public LeaseAPIClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected LeaseAPIClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected LeaseAPIClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Delete a lease event.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Tutorial.Lease.V1.DeleteLeaseEventResponse DeleteLeaseEvent(global::Tutorial.Lease.V1.DeleteLeaseEventRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteLeaseEvent(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a lease event.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Tutorial.Lease.V1.DeleteLeaseEventResponse DeleteLeaseEvent(global::Tutorial.Lease.V1.DeleteLeaseEventRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteLeaseEvent, null, options, request);
      }
      /// <summary>
      /// Delete a lease event.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Tutorial.Lease.V1.DeleteLeaseEventResponse> DeleteLeaseEventAsync(global::Tutorial.Lease.V1.DeleteLeaseEventRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteLeaseEventAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a lease event.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Tutorial.Lease.V1.DeleteLeaseEventResponse> DeleteLeaseEventAsync(global::Tutorial.Lease.V1.DeleteLeaseEventRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteLeaseEvent, null, options, request);
      }
      /// <summary>
      /// List the leases that have been created.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Tutorial.Lease.V1.ListLeasesResponse ListLeases(global::Tutorial.Lease.V1.ListLeasesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListLeases(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List the leases that have been created.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Tutorial.Lease.V1.ListLeasesResponse ListLeases(global::Tutorial.Lease.V1.ListLeasesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListLeases, null, options, request);
      }
      /// <summary>
      /// List the leases that have been created.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Tutorial.Lease.V1.ListLeasesResponse> ListLeasesAsync(global::Tutorial.Lease.V1.ListLeasesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListLeasesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List the leases that have been created.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Tutorial.Lease.V1.ListLeasesResponse> ListLeasesAsync(global::Tutorial.Lease.V1.ListLeasesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListLeases, null, options, request);
      }
      /// <summary>
      /// List the lease events that have occurred as of a point in time.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Tutorial.Lease.V1.ListLeaseEventsResponse ListLeaseEvents(global::Tutorial.Lease.V1.ListLeaseEventsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListLeaseEvents(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List the lease events that have occurred as of a point in time.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Tutorial.Lease.V1.ListLeaseEventsResponse ListLeaseEvents(global::Tutorial.Lease.V1.ListLeaseEventsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListLeaseEvents, null, options, request);
      }
      /// <summary>
      /// List the lease events that have occurred as of a point in time.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Tutorial.Lease.V1.ListLeaseEventsResponse> ListLeaseEventsAsync(global::Tutorial.Lease.V1.ListLeaseEventsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListLeaseEventsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List the lease events that have occurred as of a point in time.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Tutorial.Lease.V1.ListLeaseEventsResponse> ListLeaseEventsAsync(global::Tutorial.Lease.V1.ListLeaseEventsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListLeaseEvents, null, options, request);
      }
      /// <summary>
      /// Get a lease as of a point in time.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Tutorial.Lease.V1.GetLeaseResponse GetLease(global::Tutorial.Lease.V1.GetLeaseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetLease(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a lease as of a point in time.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Tutorial.Lease.V1.GetLeaseResponse GetLease(global::Tutorial.Lease.V1.GetLeaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetLease, null, options, request);
      }
      /// <summary>
      /// Get a lease as of a point in time.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Tutorial.Lease.V1.GetLeaseResponse> GetLeaseAsync(global::Tutorial.Lease.V1.GetLeaseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetLeaseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a lease as of a point in time.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Tutorial.Lease.V1.GetLeaseResponse> GetLeaseAsync(global::Tutorial.Lease.V1.GetLeaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetLease, null, options, request);
      }
      /// <summary>
      /// Create a new lease.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Tutorial.Lease.V1.CreateLeaseResponse CreateLease(global::Tutorial.Lease.V1.CreateLeaseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateLease(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a new lease.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Tutorial.Lease.V1.CreateLeaseResponse CreateLease(global::Tutorial.Lease.V1.CreateLeaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateLease, null, options, request);
      }
      /// <summary>
      /// Create a new lease.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Tutorial.Lease.V1.CreateLeaseResponse> CreateLeaseAsync(global::Tutorial.Lease.V1.CreateLeaseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateLeaseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a new lease.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Tutorial.Lease.V1.CreateLeaseResponse> CreateLeaseAsync(global::Tutorial.Lease.V1.CreateLeaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateLease, null, options, request);
      }
      /// <summary>
      /// Terminate an existing lease.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Tutorial.Lease.V1.TerminateLeaseResponse TerminateLease(global::Tutorial.Lease.V1.TerminateLeaseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TerminateLease(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Terminate an existing lease.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Tutorial.Lease.V1.TerminateLeaseResponse TerminateLease(global::Tutorial.Lease.V1.TerminateLeaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TerminateLease, null, options, request);
      }
      /// <summary>
      /// Terminate an existing lease.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Tutorial.Lease.V1.TerminateLeaseResponse> TerminateLeaseAsync(global::Tutorial.Lease.V1.TerminateLeaseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TerminateLeaseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Terminate an existing lease.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Tutorial.Lease.V1.TerminateLeaseResponse> TerminateLeaseAsync(global::Tutorial.Lease.V1.TerminateLeaseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TerminateLease, null, options, request);
      }
      /// <summary>
      /// Schedule a payment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Tutorial.Lease.V1.SchedulePaymentResponse SchedulePayment(global::Tutorial.Lease.V1.SchedulePaymentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SchedulePayment(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Schedule a payment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Tutorial.Lease.V1.SchedulePaymentResponse SchedulePayment(global::Tutorial.Lease.V1.SchedulePaymentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SchedulePayment, null, options, request);
      }
      /// <summary>
      /// Schedule a payment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Tutorial.Lease.V1.SchedulePaymentResponse> SchedulePaymentAsync(global::Tutorial.Lease.V1.SchedulePaymentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SchedulePaymentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Schedule a payment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Tutorial.Lease.V1.SchedulePaymentResponse> SchedulePaymentAsync(global::Tutorial.Lease.V1.SchedulePaymentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SchedulePayment, null, options, request);
      }
      /// <summary>
      /// Receive a payment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Tutorial.Lease.V1.ReceivePaymentResponse ReceivePayment(global::Tutorial.Lease.V1.ReceivePaymentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReceivePayment(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Receive a payment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Tutorial.Lease.V1.ReceivePaymentResponse ReceivePayment(global::Tutorial.Lease.V1.ReceivePaymentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ReceivePayment, null, options, request);
      }
      /// <summary>
      /// Receive a payment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Tutorial.Lease.V1.ReceivePaymentResponse> ReceivePaymentAsync(global::Tutorial.Lease.V1.ReceivePaymentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReceivePaymentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Receive a payment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Tutorial.Lease.V1.ReceivePaymentResponse> ReceivePaymentAsync(global::Tutorial.Lease.V1.ReceivePaymentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ReceivePayment, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override LeaseAPIClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new LeaseAPIClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(LeaseAPIBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_DeleteLeaseEvent, serviceImpl.DeleteLeaseEvent)
          .AddMethod(__Method_ListLeases, serviceImpl.ListLeases)
          .AddMethod(__Method_ListLeaseEvents, serviceImpl.ListLeaseEvents)
          .AddMethod(__Method_GetLease, serviceImpl.GetLease)
          .AddMethod(__Method_CreateLease, serviceImpl.CreateLease)
          .AddMethod(__Method_TerminateLease, serviceImpl.TerminateLease)
          .AddMethod(__Method_SchedulePayment, serviceImpl.SchedulePayment)
          .AddMethod(__Method_ReceivePayment, serviceImpl.ReceivePayment).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, LeaseAPIBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_DeleteLeaseEvent, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tutorial.Lease.V1.DeleteLeaseEventRequest, global::Tutorial.Lease.V1.DeleteLeaseEventResponse>(serviceImpl.DeleteLeaseEvent));
      serviceBinder.AddMethod(__Method_ListLeases, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tutorial.Lease.V1.ListLeasesRequest, global::Tutorial.Lease.V1.ListLeasesResponse>(serviceImpl.ListLeases));
      serviceBinder.AddMethod(__Method_ListLeaseEvents, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tutorial.Lease.V1.ListLeaseEventsRequest, global::Tutorial.Lease.V1.ListLeaseEventsResponse>(serviceImpl.ListLeaseEvents));
      serviceBinder.AddMethod(__Method_GetLease, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tutorial.Lease.V1.GetLeaseRequest, global::Tutorial.Lease.V1.GetLeaseResponse>(serviceImpl.GetLease));
      serviceBinder.AddMethod(__Method_CreateLease, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tutorial.Lease.V1.CreateLeaseRequest, global::Tutorial.Lease.V1.CreateLeaseResponse>(serviceImpl.CreateLease));
      serviceBinder.AddMethod(__Method_TerminateLease, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tutorial.Lease.V1.TerminateLeaseRequest, global::Tutorial.Lease.V1.TerminateLeaseResponse>(serviceImpl.TerminateLease));
      serviceBinder.AddMethod(__Method_SchedulePayment, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tutorial.Lease.V1.SchedulePaymentRequest, global::Tutorial.Lease.V1.SchedulePaymentResponse>(serviceImpl.SchedulePayment));
      serviceBinder.AddMethod(__Method_ReceivePayment, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tutorial.Lease.V1.ReceivePaymentRequest, global::Tutorial.Lease.V1.ReceivePaymentResponse>(serviceImpl.ReceivePayment));
    }

  }
}
#endregion
