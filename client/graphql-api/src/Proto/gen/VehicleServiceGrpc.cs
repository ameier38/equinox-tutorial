// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: tutorial/vehicle/v1/vehicle_service.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Tutorial.Vehicle.V1 {
  /// <summary>
  /// Service to handle interactions with Vehicles.
  /// </summary>
  public static partial class VehicleService
  {
    static readonly string __ServiceName = "tutorial.vehicle.v1.VehicleService";

    static readonly grpc::Marshaller<global::Tutorial.Vehicle.V1.AddVehicleRequest> __Marshaller_tutorial_vehicle_v1_AddVehicleRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tutorial.Vehicle.V1.AddVehicleRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tutorial.Vehicle.V1.AddVehicleResponse> __Marshaller_tutorial_vehicle_v1_AddVehicleResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tutorial.Vehicle.V1.AddVehicleResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tutorial.Vehicle.V1.RemoveVehicleRequest> __Marshaller_tutorial_vehicle_v1_RemoveVehicleRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tutorial.Vehicle.V1.RemoveVehicleRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tutorial.Vehicle.V1.RemoveVehicleResponse> __Marshaller_tutorial_vehicle_v1_RemoveVehicleResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tutorial.Vehicle.V1.RemoveVehicleResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tutorial.Vehicle.V1.LeaseVehicleRequest> __Marshaller_tutorial_vehicle_v1_LeaseVehicleRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tutorial.Vehicle.V1.LeaseVehicleRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tutorial.Vehicle.V1.LeaseVehicleResponse> __Marshaller_tutorial_vehicle_v1_LeaseVehicleResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tutorial.Vehicle.V1.LeaseVehicleResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tutorial.Vehicle.V1.ReturnVehicleRequest> __Marshaller_tutorial_vehicle_v1_ReturnVehicleRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tutorial.Vehicle.V1.ReturnVehicleRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tutorial.Vehicle.V1.ReturnVehicleResponse> __Marshaller_tutorial_vehicle_v1_ReturnVehicleResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tutorial.Vehicle.V1.ReturnVehicleResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Tutorial.Vehicle.V1.AddVehicleRequest, global::Tutorial.Vehicle.V1.AddVehicleResponse> __Method_AddVehicle = new grpc::Method<global::Tutorial.Vehicle.V1.AddVehicleRequest, global::Tutorial.Vehicle.V1.AddVehicleResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddVehicle",
        __Marshaller_tutorial_vehicle_v1_AddVehicleRequest,
        __Marshaller_tutorial_vehicle_v1_AddVehicleResponse);

    static readonly grpc::Method<global::Tutorial.Vehicle.V1.RemoveVehicleRequest, global::Tutorial.Vehicle.V1.RemoveVehicleResponse> __Method_RemoveVehicle = new grpc::Method<global::Tutorial.Vehicle.V1.RemoveVehicleRequest, global::Tutorial.Vehicle.V1.RemoveVehicleResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RemoveVehicle",
        __Marshaller_tutorial_vehicle_v1_RemoveVehicleRequest,
        __Marshaller_tutorial_vehicle_v1_RemoveVehicleResponse);

    static readonly grpc::Method<global::Tutorial.Vehicle.V1.LeaseVehicleRequest, global::Tutorial.Vehicle.V1.LeaseVehicleResponse> __Method_LeaseVehicle = new grpc::Method<global::Tutorial.Vehicle.V1.LeaseVehicleRequest, global::Tutorial.Vehicle.V1.LeaseVehicleResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "LeaseVehicle",
        __Marshaller_tutorial_vehicle_v1_LeaseVehicleRequest,
        __Marshaller_tutorial_vehicle_v1_LeaseVehicleResponse);

    static readonly grpc::Method<global::Tutorial.Vehicle.V1.ReturnVehicleRequest, global::Tutorial.Vehicle.V1.ReturnVehicleResponse> __Method_ReturnVehicle = new grpc::Method<global::Tutorial.Vehicle.V1.ReturnVehicleRequest, global::Tutorial.Vehicle.V1.ReturnVehicleResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ReturnVehicle",
        __Marshaller_tutorial_vehicle_v1_ReturnVehicleRequest,
        __Marshaller_tutorial_vehicle_v1_ReturnVehicleResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Tutorial.Vehicle.V1.VehicleServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of VehicleService</summary>
    [grpc::BindServiceMethod(typeof(VehicleService), "BindService")]
    public abstract partial class VehicleServiceBase
    {
      /// <summary>
      /// Add a vehicle to inventory.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Tutorial.Vehicle.V1.AddVehicleResponse> AddVehicle(global::Tutorial.Vehicle.V1.AddVehicleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Remove a vehicle from inventory.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Tutorial.Vehicle.V1.RemoveVehicleResponse> RemoveVehicle(global::Tutorial.Vehicle.V1.RemoveVehicleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lease a vehicle.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Tutorial.Vehicle.V1.LeaseVehicleResponse> LeaseVehicle(global::Tutorial.Vehicle.V1.LeaseVehicleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Return a vehicle after a lease.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Tutorial.Vehicle.V1.ReturnVehicleResponse> ReturnVehicle(global::Tutorial.Vehicle.V1.ReturnVehicleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for VehicleService</summary>
    public partial class VehicleServiceClient : grpc::ClientBase<VehicleServiceClient>
    {
      /// <summary>Creates a new client for VehicleService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public VehicleServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for VehicleService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public VehicleServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected VehicleServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected VehicleServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Add a vehicle to inventory.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Tutorial.Vehicle.V1.AddVehicleResponse AddVehicle(global::Tutorial.Vehicle.V1.AddVehicleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddVehicle(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a vehicle to inventory.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Tutorial.Vehicle.V1.AddVehicleResponse AddVehicle(global::Tutorial.Vehicle.V1.AddVehicleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddVehicle, null, options, request);
      }
      /// <summary>
      /// Add a vehicle to inventory.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Tutorial.Vehicle.V1.AddVehicleResponse> AddVehicleAsync(global::Tutorial.Vehicle.V1.AddVehicleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddVehicleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add a vehicle to inventory.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Tutorial.Vehicle.V1.AddVehicleResponse> AddVehicleAsync(global::Tutorial.Vehicle.V1.AddVehicleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddVehicle, null, options, request);
      }
      /// <summary>
      /// Remove a vehicle from inventory.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Tutorial.Vehicle.V1.RemoveVehicleResponse RemoveVehicle(global::Tutorial.Vehicle.V1.RemoveVehicleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveVehicle(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Remove a vehicle from inventory.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Tutorial.Vehicle.V1.RemoveVehicleResponse RemoveVehicle(global::Tutorial.Vehicle.V1.RemoveVehicleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RemoveVehicle, null, options, request);
      }
      /// <summary>
      /// Remove a vehicle from inventory.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Tutorial.Vehicle.V1.RemoveVehicleResponse> RemoveVehicleAsync(global::Tutorial.Vehicle.V1.RemoveVehicleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveVehicleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Remove a vehicle from inventory.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Tutorial.Vehicle.V1.RemoveVehicleResponse> RemoveVehicleAsync(global::Tutorial.Vehicle.V1.RemoveVehicleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RemoveVehicle, null, options, request);
      }
      /// <summary>
      /// Lease a vehicle.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Tutorial.Vehicle.V1.LeaseVehicleResponse LeaseVehicle(global::Tutorial.Vehicle.V1.LeaseVehicleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LeaseVehicle(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lease a vehicle.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Tutorial.Vehicle.V1.LeaseVehicleResponse LeaseVehicle(global::Tutorial.Vehicle.V1.LeaseVehicleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_LeaseVehicle, null, options, request);
      }
      /// <summary>
      /// Lease a vehicle.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Tutorial.Vehicle.V1.LeaseVehicleResponse> LeaseVehicleAsync(global::Tutorial.Vehicle.V1.LeaseVehicleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LeaseVehicleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lease a vehicle.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Tutorial.Vehicle.V1.LeaseVehicleResponse> LeaseVehicleAsync(global::Tutorial.Vehicle.V1.LeaseVehicleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_LeaseVehicle, null, options, request);
      }
      /// <summary>
      /// Return a vehicle after a lease.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Tutorial.Vehicle.V1.ReturnVehicleResponse ReturnVehicle(global::Tutorial.Vehicle.V1.ReturnVehicleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReturnVehicle(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Return a vehicle after a lease.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Tutorial.Vehicle.V1.ReturnVehicleResponse ReturnVehicle(global::Tutorial.Vehicle.V1.ReturnVehicleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ReturnVehicle, null, options, request);
      }
      /// <summary>
      /// Return a vehicle after a lease.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Tutorial.Vehicle.V1.ReturnVehicleResponse> ReturnVehicleAsync(global::Tutorial.Vehicle.V1.ReturnVehicleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReturnVehicleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Return a vehicle after a lease.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Tutorial.Vehicle.V1.ReturnVehicleResponse> ReturnVehicleAsync(global::Tutorial.Vehicle.V1.ReturnVehicleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ReturnVehicle, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override VehicleServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new VehicleServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(VehicleServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AddVehicle, serviceImpl.AddVehicle)
          .AddMethod(__Method_RemoveVehicle, serviceImpl.RemoveVehicle)
          .AddMethod(__Method_LeaseVehicle, serviceImpl.LeaseVehicle)
          .AddMethod(__Method_ReturnVehicle, serviceImpl.ReturnVehicle).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, VehicleServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_AddVehicle, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tutorial.Vehicle.V1.AddVehicleRequest, global::Tutorial.Vehicle.V1.AddVehicleResponse>(serviceImpl.AddVehicle));
      serviceBinder.AddMethod(__Method_RemoveVehicle, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tutorial.Vehicle.V1.RemoveVehicleRequest, global::Tutorial.Vehicle.V1.RemoveVehicleResponse>(serviceImpl.RemoveVehicle));
      serviceBinder.AddMethod(__Method_LeaseVehicle, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tutorial.Vehicle.V1.LeaseVehicleRequest, global::Tutorial.Vehicle.V1.LeaseVehicleResponse>(serviceImpl.LeaseVehicle));
      serviceBinder.AddMethod(__Method_ReturnVehicle, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Tutorial.Vehicle.V1.ReturnVehicleRequest, global::Tutorial.Vehicle.V1.ReturnVehicleResponse>(serviceImpl.ReturnVehicle));
    }

  }
}
#endregion
